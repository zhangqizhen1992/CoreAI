// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM61 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM61)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          111 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x3c40 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x3300 		// section header offset, maybe updated by assembler
	.__elf_flags            0x3d053d 		// Flags, SM_61(0x3d), COMPUTE_61(0x3d) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            37 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x3cc 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .shstrtab[6] = b'.text._Z7argtestPiS_S_\x00' 
    /*0032*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*003a*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*0042*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[7] = b'.nv.info._Z7argtestPiS_S_\x00' 
    /*0049*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0051*/ .byte 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*0059*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*0061*/ .byte 0x5f, 0x00

    // .shstrtab[8] = b'.nv.shared._Z7argtestPiS_S_\x00' 
    /*0063*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*006b*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72
    /*0073*/ .byte 0x67, 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53
    /*007b*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[9] = b'.nv.constant3\x00' 
    /*007f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0087*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x33, 0x00

    // .shstrtab[10] = b'.nv.global\x00' 
    /*008d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x67, 0x6c, 0x6f, 0x62
    /*0095*/ .byte 0x61, 0x6c, 0x00

    // .shstrtab[11] = b'.nv.global.init\x00' 
    /*0098*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x67, 0x6c, 0x6f, 0x62
    /*00a0*/ .byte 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x00

    // .shstrtab[12] = b'.nv.constant2._Z7argtestPiS_S_\x00' 
    /*00a8*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00b0*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x32, 0x2e, 0x5f, 0x5a
    /*00b8*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*00c0*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[13] = b'.rel.text._Z7argtestPiS_S_\x00' 
    /*00c7*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78
    /*00cf*/ .byte 0x74, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*00d7*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*00df*/ .byte 0x53, 0x5f, 0x00

    // .shstrtab[14] = b'.nv.constant0._Z7argtestPiS_S_\x00' 
    /*00e2*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00ea*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00f2*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*00fa*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[15] = b'.text._Z11shared_testfPf\x00' 
    /*0101*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0109*/ .byte 0x31, 0x31, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64
    /*0111*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x66, 0x50, 0x66
    /*0119*/ .byte 0x00

    // .shstrtab[16] = b'.nv.info._Z11shared_testfPf\x00' 
    /*011a*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0122*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x73, 0x68, 0x61
    /*012a*/ .byte 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0132*/ .byte 0x66, 0x50, 0x66, 0x00

    // .shstrtab[17] = b'.nv.shared._Z11shared_testfPf\x00' 
    /*0136*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*013e*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x73
    /*0146*/ .byte 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65
    /*014e*/ .byte 0x73, 0x74, 0x66, 0x50, 0x66, 0x00

    // .shstrtab[18] = b'.nv.constant0._Z11shared_testfPf\x00' 
    /*0154*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*015c*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0164*/ .byte 0x31, 0x31, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64
    /*016c*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x66, 0x50, 0x66
    /*0174*/ .byte 0x00

    // .shstrtab[19] = b'.text._Z11nvinfo_testiiPi\x00' 
    /*0175*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*017d*/ .byte 0x31, 0x31, 0x6e, 0x76, 0x69, 0x6e, 0x66, 0x6f
    /*0185*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50
    /*018d*/ .byte 0x69, 0x00

    // .shstrtab[20] = b'.nv.info._Z11nvinfo_testiiPi\x00' 
    /*018f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0197*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x6e, 0x76, 0x69
    /*019f*/ .byte 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*01a7*/ .byte 0x69, 0x69, 0x50, 0x69, 0x00

    // .shstrtab[21] = b'.nv.shared._Z11nvinfo_testiiPi\x00' 
    /*01ac*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*01b4*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x6e
    /*01bc*/ .byte 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65
    /*01c4*/ .byte 0x73, 0x74, 0x69, 0x69, 0x50, 0x69, 0x00

    // .shstrtab[22] = b'.nv.constant0._Z11nvinfo_testiiPi\x00' 
    /*01cb*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*01d3*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*01db*/ .byte 0x31, 0x31, 0x6e, 0x76, 0x69, 0x6e, 0x66, 0x6f
    /*01e3*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50
    /*01eb*/ .byte 0x69, 0x00

    // .shstrtab[23] = b'.text._Z5childPii\x00' 
    /*01ed*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*01f5*/ .byte 0x35, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x69
    /*01fd*/ .byte 0x69, 0x00

    // .shstrtab[24] = b'.nv.info._Z5childPii\x00' 
    /*01ff*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0207*/ .byte 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69, 0x6c
    /*020f*/ .byte 0x64, 0x50, 0x69, 0x69, 0x00

    // .shstrtab[25] = b'.nv.shared._Z5childPii\x00' 
    /*0214*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*021c*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68
    /*0224*/ .byte 0x69, 0x6c, 0x64, 0x50, 0x69, 0x69, 0x00

    // .shstrtab[26] = b'.rel.text._Z5childPii\x00' 
    /*022b*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78
    /*0233*/ .byte 0x74, 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69
    /*023b*/ .byte 0x6c, 0x64, 0x50, 0x69, 0x69, 0x00

    // .shstrtab[27] = b'.nv.constant0._Z5childPii\x00' 
    /*0241*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0249*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0251*/ .byte 0x35, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x69
    /*0259*/ .byte 0x69, 0x00

    // .shstrtab[28] = b'.text._Z10local_testiiPi\x00' 
    /*025b*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0263*/ .byte 0x31, 0x30, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f
    /*026b*/ .byte 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50, 0x69
    /*0273*/ .byte 0x00

    // .shstrtab[29] = b'.nv.info._Z10local_testiiPi\x00' 
    /*0274*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*027c*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x30, 0x6c, 0x6f, 0x63
    /*0284*/ .byte 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69
    /*028c*/ .byte 0x69, 0x50, 0x69, 0x00

    // .shstrtab[30] = b'.nv.shared._Z10local_testiiPi\x00' 
    /*0290*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0298*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x30, 0x6c
    /*02a0*/ .byte 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73
    /*02a8*/ .byte 0x74, 0x69, 0x69, 0x50, 0x69, 0x00

    // .shstrtab[31] = b'.nv.constant0._Z10local_testiiPi\x00' 
    /*02ae*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*02b6*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*02be*/ .byte 0x31, 0x30, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f
    /*02c6*/ .byte 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50, 0x69
    /*02ce*/ .byte 0x00

    // .shstrtab[32] = b'.text._Z4test6float4PS_\x00' 
    /*02cf*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*02d7*/ .byte 0x34, 0x74, 0x65, 0x73, 0x74, 0x36, 0x66, 0x6c
    /*02df*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x53, 0x5f, 0x00

    // .shstrtab[33] = b'.nv.info._Z4test6float4PS_\x00' 
    /*02e7*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*02ef*/ .byte 0x2e, 0x5f, 0x5a, 0x34, 0x74, 0x65, 0x73, 0x74
    /*02f7*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*02ff*/ .byte 0x53, 0x5f, 0x00

    // .shstrtab[34] = b'.nv.shared._Z4test6float4PS_\x00' 
    /*0302*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*030a*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x34, 0x74, 0x65
    /*0312*/ .byte 0x73, 0x74, 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74
    /*031a*/ .byte 0x34, 0x50, 0x53, 0x5f, 0x00

    // .shstrtab[35] = b'.nv.constant0._Z4test6float4PS_\x00' 
    /*031f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0327*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*032f*/ .byte 0x34, 0x74, 0x65, 0x73, 0x74, 0x36, 0x66, 0x6c
    /*0337*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x53, 0x5f, 0x00

    // .shstrtab[36] = b'.rel.nv.global.init\x00' 
    /*033f*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*0347*/ .byte 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69
    /*034f*/ .byte 0x6e, 0x69, 0x74, 0x00

    // .shstrtab[37] = b'.rela.nv.constant2._Z7argtestPiS_S_\x00' 
    /*0353*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x6e, 0x76
    /*035b*/ .byte 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e
    /*0363*/ .byte 0x74, 0x32, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72
    /*036b*/ .byte 0x67, 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53
    /*0373*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[38] = b'.rel.nv.constant2._Z7argtestPiS_S_\x00' 
    /*0377*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*037f*/ .byte 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74
    /*0387*/ .byte 0x32, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*038f*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*0397*/ .byte 0x53, 0x5f, 0x00

    // .shstrtab[39] = b'.rel.nv.constant0._Z7argtestPiS_S_\x00' 
    /*039a*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*03a2*/ .byte 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74
    /*03aa*/ .byte 0x30, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*03b2*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*03ba*/ .byte 0x53, 0x5f, 0x00

    // .shstrtab[40] = b'.nv.rel.action\x00' 
    /*03bd*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*03c5*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40c 	// maybe updated by assembler
	.__section_size         0x737 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .strtab[6] = b'_Z7argtestPiS_S_\x00' 
    /*0032*/ .byte 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74, 0x65
    /*003a*/ .byte 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f
    /*0042*/ .byte 0x00

    // .strtab[7] = b'.text._Z7argtestPiS_S_\x00' 
    /*0043*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*004b*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*0053*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[8] = b'.nv.info._Z7argtestPiS_S_\x00' 
    /*005a*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0062*/ .byte 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*006a*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*0072*/ .byte 0x5f, 0x00

    // .strtab[9] = b'.nv.shared._Z7argtestPiS_S_\x00' 
    /*0074*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*007c*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72
    /*0084*/ .byte 0x67, 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53
    /*008c*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[10] = b'texRef2d\x00' 
    /*0090*/ .byte 0x74, 0x65, 0x78, 0x52, 0x65, 0x66, 0x32, 0x64
    /*0098*/ .byte 0x00

    // .strtab[11] = b'texRef1d\x00' 
    /*0099*/ .byte 0x74, 0x65, 0x78, 0x52, 0x65, 0x66, 0x31, 0x64
    /*00a1*/ .byte 0x00

    // .strtab[12] = b'inputSurfRef\x00' 
    /*00a2*/ .byte 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x75, 0x72
    /*00aa*/ .byte 0x66, 0x52, 0x65, 0x66, 0x00

    // .strtab[13] = b'outputSurfRef\x00' 
    /*00af*/ .byte 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75
    /*00b7*/ .byte 0x72, 0x66, 0x52, 0x65, 0x66, 0x00

    // .strtab[14] = b'.nv.constant3\x00' 
    /*00bd*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00c5*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x33, 0x00

    // .strtab[15] = b'C1\x00' 
    /*00cb*/ .byte 0x43, 0x31, 0x00

    // .strtab[16] = b'C2\x00' 
    /*00ce*/ .byte 0x43, 0x32, 0x00

    // .strtab[17] = b'C3\x00' 
    /*00d1*/ .byte 0x43, 0x33, 0x00

    // .strtab[18] = b'.nv.global\x00' 
    /*00d4*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x67, 0x6c, 0x6f, 0x62
    /*00dc*/ .byte 0x61, 0x6c, 0x00

    // .strtab[19] = b'GlobalC1\x00' 
    /*00df*/ .byte 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x31
    /*00e7*/ .byte 0x00

    // .strtab[20] = b'GlobalC2\x00' 
    /*00e8*/ .byte 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x32
    /*00f0*/ .byte 0x00

    // .strtab[21] = b'.nv.global.init\x00' 
    /*00f1*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x67, 0x6c, 0x6f, 0x62
    /*00f9*/ .byte 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x00

    // .strtab[22] = b'flist\x00' 
    /*0101*/ .byte 0x66, 0x6c, 0x69, 0x73, 0x74, 0x00

    // .strtab[23] = b'$str\x00' 
    /*0107*/ .byte 0x24, 0x73, 0x74, 0x72, 0x00

    // .strtab[24] = b'__cudart_i2opi_f\x00' 
    /*010c*/ .byte 0x5f, 0x5f, 0x63, 0x75, 0x64, 0x61, 0x72, 0x74
    /*0114*/ .byte 0x5f, 0x69, 0x32, 0x6f, 0x70, 0x69, 0x5f, 0x66
    /*011c*/ .byte 0x00

    // .strtab[25] = b'vprintf\x00' 
    /*011d*/ .byte 0x76, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x66, 0x00

    // .strtab[26] = b'.nv.constant2._Z7argtestPiS_S_\x00' 
    /*0125*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*012d*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x32, 0x2e, 0x5f, 0x5a
    /*0135*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*013d*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[27] = b'__ocg_const\x00' 
    /*0144*/ .byte 0x5f, 0x5f, 0x6f, 0x63, 0x67, 0x5f, 0x63, 0x6f
    /*014c*/ .byte 0x6e, 0x73, 0x74, 0x00

    // .strtab[28] = b'$_Z7argtestPiS_S_$_Z2f1ii\x00' 
    /*0150*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*0158*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*0160*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x31, 0x69
    /*0168*/ .byte 0x69, 0x00

    // .strtab[29] = b'$_Z7argtestPiS_S_$_Z2f2ii\x00' 
    /*016a*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*0172*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*017a*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x32, 0x69
    /*0182*/ .byte 0x69, 0x00

    // .strtab[30] = b'$_Z7argtestPiS_S_$_Z2f3ii\x00' 
    /*0184*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*018c*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*0194*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x33, 0x69
    /*019c*/ .byte 0x69, 0x00

    // .strtab[31] = b'$_Z7argtestPiS_S_$_Z2f4ii\x00' 
    /*019e*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*01a6*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*01ae*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x34, 0x69
    /*01b6*/ .byte 0x69, 0x00

    // .strtab[32] = b'$_Z7argtestPiS_S_$_Z2f5ii\x00' 
    /*01b8*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*01c0*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*01c8*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x35, 0x69
    /*01d0*/ .byte 0x69, 0x00

    // .strtab[33] = b'$_Z7argtestPiS_S_$_Z2f6ii\x00' 
    /*01d2*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*01da*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*01e2*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x36, 0x69
    /*01ea*/ .byte 0x69, 0x00

    // .strtab[34] = b'$_Z7argtestPiS_S_$_Z2f7ii\x00' 
    /*01ec*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*01f4*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*01fc*/ .byte 0x5f, 0x24, 0x5f, 0x5a, 0x32, 0x66, 0x37, 0x69
    /*0204*/ .byte 0x69, 0x00

    // .strtab[35] = b'.rel.text._Z7argtestPiS_S_\x00' 
    /*0206*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78
    /*020e*/ .byte 0x74, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*0216*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*021e*/ .byte 0x53, 0x5f, 0x00

    // .strtab[36] = b'$_Z7argtestPiS_S_$ShMem_d\x00' 
    /*0221*/ .byte 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67, 0x74
    /*0229*/ .byte 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f, 0x53
    /*0231*/ .byte 0x5f, 0x24, 0x53, 0x68, 0x4d, 0x65, 0x6d, 0x5f
    /*0239*/ .byte 0x64, 0x00

    // .strtab[37] = b'.nv.constant0._Z7argtestPiS_S_\x00' 
    /*023b*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0243*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*024b*/ .byte 0x37, 0x61, 0x72, 0x67, 0x74, 0x65, 0x73, 0x74
    /*0253*/ .byte 0x50, 0x69, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[38] = b'_param\x00' 
    /*025a*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[39] = b'$BINDLESS$_Z7argtestPiS_S_$texRef2d\x00' 
    /*0261*/ .byte 0x24, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x53
    /*0269*/ .byte 0x53, 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*0271*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*0279*/ .byte 0x53, 0x5f, 0x24, 0x74, 0x65, 0x78, 0x52, 0x65
    /*0281*/ .byte 0x66, 0x32, 0x64, 0x00

    // .strtab[40] = b'$BINDLESS$_Z7argtestPiS_S_$texRef1d\x00' 
    /*0285*/ .byte 0x24, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x53
    /*028d*/ .byte 0x53, 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*0295*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*029d*/ .byte 0x53, 0x5f, 0x24, 0x74, 0x65, 0x78, 0x52, 0x65
    /*02a5*/ .byte 0x66, 0x31, 0x64, 0x00

    // .strtab[41] = b'$BINDLESS$_Z7argtestPiS_S_$inputSurfRef\x00' 
    /*02a9*/ .byte 0x24, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x53
    /*02b1*/ .byte 0x53, 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*02b9*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*02c1*/ .byte 0x53, 0x5f, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74
    /*02c9*/ .byte 0x53, 0x75, 0x72, 0x66, 0x52, 0x65, 0x66, 0x00

    // .strtab[42] = b'$BINDLESS$_Z7argtestPiS_S_$outputSurfRef\x00' 
    /*02d1*/ .byte 0x24, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x53
    /*02d9*/ .byte 0x53, 0x24, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*02e1*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*02e9*/ .byte 0x53, 0x5f, 0x24, 0x6f, 0x75, 0x74, 0x70, 0x75
    /*02f1*/ .byte 0x74, 0x53, 0x75, 0x72, 0x66, 0x52, 0x65, 0x66
    /*02f9*/ .byte 0x00

    // .strtab[43] = b'_Z11shared_testfPf\x00' 
    /*02fa*/ .byte 0x5f, 0x5a, 0x31, 0x31, 0x73, 0x68, 0x61, 0x72
    /*0302*/ .byte 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x66
    /*030a*/ .byte 0x50, 0x66, 0x00

    // .strtab[44] = b'.text._Z11shared_testfPf\x00' 
    /*030d*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0315*/ .byte 0x31, 0x31, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64
    /*031d*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x66, 0x50, 0x66
    /*0325*/ .byte 0x00

    // .strtab[45] = b'.nv.info._Z11shared_testfPf\x00' 
    /*0326*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*032e*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x73, 0x68, 0x61
    /*0336*/ .byte 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*033e*/ .byte 0x66, 0x50, 0x66, 0x00

    // .strtab[46] = b'.nv.shared._Z11shared_testfPf\x00' 
    /*0342*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*034a*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x73
    /*0352*/ .byte 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65
    /*035a*/ .byte 0x73, 0x74, 0x66, 0x50, 0x66, 0x00

    // .strtab[47] = b'$___ZZ11shared_testfPfE7ShMem_s__568\x00' 
    /*0360*/ .byte 0x24, 0x5f, 0x5f, 0x5f, 0x5a, 0x5a, 0x31, 0x31
    /*0368*/ .byte 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74
    /*0370*/ .byte 0x65, 0x73, 0x74, 0x66, 0x50, 0x66, 0x45, 0x37
    /*0378*/ .byte 0x53, 0x68, 0x4d, 0x65, 0x6d, 0x5f, 0x73, 0x5f
    /*0380*/ .byte 0x5f, 0x35, 0x36, 0x38, 0x00

    // .strtab[48] = b'$_Z11shared_testfPf$ShMem_d\x00' 
    /*0385*/ .byte 0x24, 0x5f, 0x5a, 0x31, 0x31, 0x73, 0x68, 0x61
    /*038d*/ .byte 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0395*/ .byte 0x66, 0x50, 0x66, 0x24, 0x53, 0x68, 0x4d, 0x65
    /*039d*/ .byte 0x6d, 0x5f, 0x64, 0x00

    // .strtab[49] = b'.nv.constant0._Z11shared_testfPf\x00' 
    /*03a1*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*03a9*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*03b1*/ .byte 0x31, 0x31, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64
    /*03b9*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x66, 0x50, 0x66
    /*03c1*/ .byte 0x00

    // .strtab[50] = b'_Z11nvinfo_testiiPi\x00' 
    /*03c2*/ .byte 0x5f, 0x5a, 0x31, 0x31, 0x6e, 0x76, 0x69, 0x6e
    /*03ca*/ .byte 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69
    /*03d2*/ .byte 0x69, 0x50, 0x69, 0x00

    // .strtab[51] = b'.text._Z11nvinfo_testiiPi\x00' 
    /*03d6*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*03de*/ .byte 0x31, 0x31, 0x6e, 0x76, 0x69, 0x6e, 0x66, 0x6f
    /*03e6*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50
    /*03ee*/ .byte 0x69, 0x00

    // .strtab[52] = b'.nv.info._Z11nvinfo_testiiPi\x00' 
    /*03f0*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*03f8*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x6e, 0x76, 0x69
    /*0400*/ .byte 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*0408*/ .byte 0x69, 0x69, 0x50, 0x69, 0x00

    // .strtab[53] = b'.nv.shared._Z11nvinfo_testiiPi\x00' 
    /*040d*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0415*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x31, 0x6e
    /*041d*/ .byte 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65
    /*0425*/ .byte 0x73, 0x74, 0x69, 0x69, 0x50, 0x69, 0x00

    // .strtab[54] = b'$_Z11nvinfo_testiiPi$ShMem_d\x00' 
    /*042c*/ .byte 0x24, 0x5f, 0x5a, 0x31, 0x31, 0x6e, 0x76, 0x69
    /*0434*/ .byte 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74
    /*043c*/ .byte 0x69, 0x69, 0x50, 0x69, 0x24, 0x53, 0x68, 0x4d
    /*0444*/ .byte 0x65, 0x6d, 0x5f, 0x64, 0x00

    // .strtab[55] = b'.nv.constant0._Z11nvinfo_testiiPi\x00' 
    /*0449*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0451*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0459*/ .byte 0x31, 0x31, 0x6e, 0x76, 0x69, 0x6e, 0x66, 0x6f
    /*0461*/ .byte 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50
    /*0469*/ .byte 0x69, 0x00

    // .strtab[56] = b'_Z5childPii\x00' 
    /*046b*/ .byte 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69, 0x6c, 0x64
    /*0473*/ .byte 0x50, 0x69, 0x69, 0x00

    // .strtab[57] = b'.text._Z5childPii\x00' 
    /*0477*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*047f*/ .byte 0x35, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x69
    /*0487*/ .byte 0x69, 0x00

    // .strtab[58] = b'.nv.info._Z5childPii\x00' 
    /*0489*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0491*/ .byte 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69, 0x6c
    /*0499*/ .byte 0x64, 0x50, 0x69, 0x69, 0x00

    // .strtab[59] = b'.nv.shared._Z5childPii\x00' 
    /*049e*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*04a6*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68
    /*04ae*/ .byte 0x69, 0x6c, 0x64, 0x50, 0x69, 0x69, 0x00

    // .strtab[60] = b'.rel.text._Z5childPii\x00' 
    /*04b5*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78
    /*04bd*/ .byte 0x74, 0x2e, 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69
    /*04c5*/ .byte 0x6c, 0x64, 0x50, 0x69, 0x69, 0x00

    // .strtab[61] = b'$_Z5childPii$ShMem_d\x00' 
    /*04cb*/ .byte 0x24, 0x5f, 0x5a, 0x35, 0x63, 0x68, 0x69, 0x6c
    /*04d3*/ .byte 0x64, 0x50, 0x69, 0x69, 0x24, 0x53, 0x68, 0x4d
    /*04db*/ .byte 0x65, 0x6d, 0x5f, 0x64, 0x00

    // .strtab[62] = b'.nv.constant0._Z5childPii\x00' 
    /*04e0*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*04e8*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*04f0*/ .byte 0x35, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x69
    /*04f8*/ .byte 0x69, 0x00

    // .strtab[63] = b'_Z10local_testiiPi\x00' 
    /*04fa*/ .byte 0x5f, 0x5a, 0x31, 0x30, 0x6c, 0x6f, 0x63, 0x61
    /*0502*/ .byte 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x69
    /*050a*/ .byte 0x50, 0x69, 0x00

    // .strtab[64] = b'.text._Z10local_testiiPi\x00' 
    /*050d*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0515*/ .byte 0x31, 0x30, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f
    /*051d*/ .byte 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50, 0x69
    /*0525*/ .byte 0x00

    // .strtab[65] = b'.nv.info._Z10local_testiiPi\x00' 
    /*0526*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*052e*/ .byte 0x2e, 0x5f, 0x5a, 0x31, 0x30, 0x6c, 0x6f, 0x63
    /*0536*/ .byte 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69
    /*053e*/ .byte 0x69, 0x50, 0x69, 0x00

    // .strtab[66] = b'.nv.shared._Z10local_testiiPi\x00' 
    /*0542*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*054a*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x31, 0x30, 0x6c
    /*0552*/ .byte 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73
    /*055a*/ .byte 0x74, 0x69, 0x69, 0x50, 0x69, 0x00

    // .strtab[67] = b'$_Z10local_testiiPi$ShMem_d\x00' 
    /*0560*/ .byte 0x24, 0x5f, 0x5a, 0x31, 0x30, 0x6c, 0x6f, 0x63
    /*0568*/ .byte 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69
    /*0570*/ .byte 0x69, 0x50, 0x69, 0x24, 0x53, 0x68, 0x4d, 0x65
    /*0578*/ .byte 0x6d, 0x5f, 0x64, 0x00

    // .strtab[68] = b'.nv.constant0._Z10local_testiiPi\x00' 
    /*057c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0584*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*058c*/ .byte 0x31, 0x30, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f
    /*0594*/ .byte 0x74, 0x65, 0x73, 0x74, 0x69, 0x69, 0x50, 0x69
    /*059c*/ .byte 0x00

    // .strtab[69] = b'_Z4test6float4PS_\x00' 
    /*059d*/ .byte 0x5f, 0x5a, 0x34, 0x74, 0x65, 0x73, 0x74, 0x36
    /*05a5*/ .byte 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50, 0x53
    /*05ad*/ .byte 0x5f, 0x00

    // .strtab[70] = b'.text._Z4test6float4PS_\x00' 
    /*05af*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*05b7*/ .byte 0x34, 0x74, 0x65, 0x73, 0x74, 0x36, 0x66, 0x6c
    /*05bf*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x53, 0x5f, 0x00

    // .strtab[71] = b'.nv.info._Z4test6float4PS_\x00' 
    /*05c7*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*05cf*/ .byte 0x2e, 0x5f, 0x5a, 0x34, 0x74, 0x65, 0x73, 0x74
    /*05d7*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*05df*/ .byte 0x53, 0x5f, 0x00

    // .strtab[72] = b'.nv.shared._Z4test6float4PS_\x00' 
    /*05e2*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*05ea*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x34, 0x74, 0x65
    /*05f2*/ .byte 0x73, 0x74, 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74
    /*05fa*/ .byte 0x34, 0x50, 0x53, 0x5f, 0x00

    // .strtab[73] = b'$_Z4test6float4PS_$ShMem_d\x00' 
    /*05ff*/ .byte 0x24, 0x5f, 0x5a, 0x34, 0x74, 0x65, 0x73, 0x74
    /*0607*/ .byte 0x36, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x50
    /*060f*/ .byte 0x53, 0x5f, 0x24, 0x53, 0x68, 0x4d, 0x65, 0x6d
    /*0617*/ .byte 0x5f, 0x64, 0x00

    // .strtab[74] = b'.nv.constant0._Z4test6float4PS_\x00' 
    /*061a*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0622*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*062a*/ .byte 0x34, 0x74, 0x65, 0x73, 0x74, 0x36, 0x66, 0x6c
    /*0632*/ .byte 0x6f, 0x61, 0x74, 0x34, 0x50, 0x53, 0x5f, 0x00

    // .strtab[75] = b'$funcID$_Z2f1ii\x00' 
    /*063a*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*0642*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x31, 0x69, 0x69, 0x00

    // .strtab[76] = b'.rel.nv.global.init\x00' 
    /*064a*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*0652*/ .byte 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69
    /*065a*/ .byte 0x6e, 0x69, 0x74, 0x00

    // .strtab[77] = b'$funcID$_Z2f2ii\x00' 
    /*065e*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*0666*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x32, 0x69, 0x69, 0x00

    // .strtab[78] = b'$funcID$_Z2f3ii\x00' 
    /*066e*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*0676*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x33, 0x69, 0x69, 0x00

    // .strtab[79] = b'$funcID$_Z2f4ii\x00' 
    /*067e*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*0686*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x34, 0x69, 0x69, 0x00

    // .strtab[80] = b'$funcID$_Z2f5ii\x00' 
    /*068e*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*0696*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x35, 0x69, 0x69, 0x00

    // .strtab[81] = b'$funcID$_Z2f6ii\x00' 
    /*069e*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*06a6*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x36, 0x69, 0x69, 0x00

    // .strtab[82] = b'$funcID$_Z2f7ii\x00' 
    /*06ae*/ .byte 0x24, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x44, 0x24
    /*06b6*/ .byte 0x5f, 0x5a, 0x32, 0x66, 0x37, 0x69, 0x69, 0x00

    // .strtab[83] = b'.rela.nv.constant2._Z7argtestPiS_S_\x00' 
    /*06be*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x6e, 0x76
    /*06c6*/ .byte 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e
    /*06ce*/ .byte 0x74, 0x32, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72
    /*06d6*/ .byte 0x67, 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53
    /*06de*/ .byte 0x5f, 0x53, 0x5f, 0x00

    // .strtab[84] = b'.rel.nv.constant2._Z7argtestPiS_S_\x00' 
    /*06e2*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*06ea*/ .byte 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74
    /*06f2*/ .byte 0x32, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*06fa*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*0702*/ .byte 0x53, 0x5f, 0x00

    // .strtab[85] = b'.rel.nv.constant0._Z7argtestPiS_S_\x00' 
    /*0705*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x6e, 0x76, 0x2e
    /*070d*/ .byte 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74
    /*0715*/ .byte 0x30, 0x2e, 0x5f, 0x5a, 0x37, 0x61, 0x72, 0x67
    /*071d*/ .byte 0x74, 0x65, 0x73, 0x74, 0x50, 0x69, 0x53, 0x5f
    /*0725*/ .byte 0x53, 0x5f, 0x00

    // .strtab[86] = b'.nv.rel.action\x00' 
    /*0728*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*0730*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0xb48 	// maybe updated by assembler
	.__section_size         0x438 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x21
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z7argtestPiS_S_": Container({'st_name': 67, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x43, 0x00, 0x00, 0x00, 0x03, 0x00, 0x17, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant3": Container({'st_name': 189, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 15, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0xbd, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0f, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] "C1": Container({'st_name': 203, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 15, 'st_value': 0, 'st_size': 44})
    /*0048*/ .byte 0xcb, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] "C2": Container({'st_name': 206, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 15, 'st_value': 44, 'st_size': 260})
    /*0060*/ .byte 0xce, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x00
    /*0068*/ .byte 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] "C3": Container({'st_name': 209, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 15, 'st_value': 304, 'st_size': 17})
    /*0078*/ .byte 0xd1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x00
    /*0080*/ .byte 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[6] ".nv.global": Container({'st_name': 212, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 31, 'st_value': 0, 'st_size': 0})
    /*0090*/ .byte 0xd4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1f, 0x00
    /*0098*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00a0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[7] "GlobalC1": Container({'st_name': 223, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 31, 'st_value': 0, 'st_size': 28})
    /*00a8*/ .byte 0xdf, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x00
    /*00b0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00b8*/ .byte 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[8] "GlobalC2": Container({'st_name': 232, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 31, 'st_value': 28, 'st_size': 132})
    /*00c0*/ .byte 0xe8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x00
    /*00c8*/ .byte 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00d0*/ .byte 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[9] ".nv.global.init": Container({'st_name': 241, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 29, 'st_value': 0, 'st_size': 0})
    /*00d8*/ .byte 0xf1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x1d, 0x00
    /*00e0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00e8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[10] "flist": Container({'st_name': 257, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 29, 'st_value': 0, 'st_size': 56})
    /*00f0*/ .byte 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x00
    /*00f8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0100*/ .byte 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[11] "$str": Container({'st_name': 263, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 29, 'st_value': 80, 'st_size': 12})
    /*0108*/ .byte 0x07, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x00
    /*0110*/ .byte 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0118*/ .byte 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[12] "__cudart_i2opi_f": Container({'st_name': 268, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_OBJECT'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 29, 'st_value': 56, 'st_size': 24})
    /*0120*/ .byte 0x0c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x00
    /*0128*/ .byte 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0130*/ .byte 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[13] ".nv.constant2._Z7argtestPiS_S_": Container({'st_name': 293, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 16, 'st_value': 0, 'st_size': 0})
    /*0138*/ .byte 0x25, 0x01, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00
    /*0140*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0148*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[14] "$_Z7argtestPiS_S_$_Z2f1ii": Container({'st_name': 336, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1616, 'st_size': 8})
    /*0150*/ .byte 0x50, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*0158*/ .byte 0x50, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0160*/ .byte 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[15] "$_Z7argtestPiS_S_$_Z2f2ii": Container({'st_name': 362, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1624, 'st_size': 8})
    /*0168*/ .byte 0x6a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*0170*/ .byte 0x58, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0178*/ .byte 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[16] "$_Z7argtestPiS_S_$_Z2f3ii": Container({'st_name': 388, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1632, 'st_size': 16})
    /*0180*/ .byte 0x84, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*0188*/ .byte 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0190*/ .byte 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[17] "$_Z7argtestPiS_S_$_Z2f4ii": Container({'st_name': 414, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1648, 'st_size': 8})
    /*0198*/ .byte 0x9e, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*01a0*/ .byte 0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*01a8*/ .byte 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[18] "$_Z7argtestPiS_S_$_Z2f5ii": Container({'st_name': 440, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1656, 'st_size': 24})
    /*01b0*/ .byte 0xb8, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*01b8*/ .byte 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*01c0*/ .byte 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[19] "$_Z7argtestPiS_S_$_Z2f6ii": Container({'st_name': 466, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 1680, 'st_size': 424})
    /*01c8*/ .byte 0xd2, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*01d0*/ .byte 0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*01d8*/ .byte 0xa8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[20] "$_Z7argtestPiS_S_$_Z2f7ii": Container({'st_name': 492, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 2104, 'st_size': 456})
    /*01e0*/ .byte 0xec, 0x01, 0x00, 0x00, 0x02, 0x00, 0x17, 0x00
    /*01e8*/ .byte 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*01f0*/ .byte 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[21] ".nv.constant0._Z7argtestPiS_S_": Container({'st_name': 571, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 17, 'st_value': 0, 'st_size': 0})
    /*01f8*/ .byte 0x3b, 0x02, 0x00, 0x00, 0x03, 0x00, 0x11, 0x00
    /*0200*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0208*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[22] ".text._Z11shared_testfPf": Container({'st_name': 781, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 24, 'st_value': 0, 'st_size': 0})
    /*0210*/ .byte 0x0d, 0x03, 0x00, 0x00, 0x03, 0x00, 0x18, 0x00
    /*0218*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0220*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[23] ".nv.shared._Z11shared_testfPf": Container({'st_name': 834, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 32, 'st_value': 0, 'st_size': 0})
    /*0228*/ .byte 0x42, 0x03, 0x00, 0x00, 0x03, 0x00, 0x20, 0x00
    /*0230*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0238*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[24] ".nv.constant0._Z11shared_testfPf": Container({'st_name': 929, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 18, 'st_value': 0, 'st_size': 0})
    /*0240*/ .byte 0xa1, 0x03, 0x00, 0x00, 0x03, 0x00, 0x12, 0x00
    /*0248*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0250*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[25] ".text._Z11nvinfo_testiiPi": Container({'st_name': 982, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 25, 'st_value': 0, 'st_size': 0})
    /*0258*/ .byte 0xd6, 0x03, 0x00, 0x00, 0x03, 0x00, 0x19, 0x00
    /*0260*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0268*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[26] ".nv.constant0._Z11nvinfo_testiiPi": Container({'st_name': 1097, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 19, 'st_value': 0, 'st_size': 0})
    /*0270*/ .byte 0x49, 0x04, 0x00, 0x00, 0x03, 0x00, 0x13, 0x00
    /*0278*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0280*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[27] ".text._Z5childPii": Container({'st_name': 1143, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 26, 'st_value': 0, 'st_size': 0})
    /*0288*/ .byte 0x77, 0x04, 0x00, 0x00, 0x03, 0x00, 0x1a, 0x00
    /*0290*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0298*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[28] ".nv.constant0._Z5childPii": Container({'st_name': 1248, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 20, 'st_value': 0, 'st_size': 0})
    /*02a0*/ .byte 0xe0, 0x04, 0x00, 0x00, 0x03, 0x00, 0x14, 0x00
    /*02a8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*02b0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[29] ".text._Z10local_testiiPi": Container({'st_name': 1293, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 27, 'st_value': 0, 'st_size': 0})
    /*02b8*/ .byte 0x0d, 0x05, 0x00, 0x00, 0x03, 0x00, 0x1b, 0x00
    /*02c0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*02c8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[30] ".nv.constant0._Z10local_testiiPi": Container({'st_name': 1404, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 21, 'st_value': 0, 'st_size': 0})
    /*02d0*/ .byte 0x7c, 0x05, 0x00, 0x00, 0x03, 0x00, 0x15, 0x00
    /*02d8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*02e0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[31] ".text._Z4test6float4PS_": Container({'st_name': 1455, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 28, 'st_value': 0, 'st_size': 0})
    /*02e8*/ .byte 0xaf, 0x05, 0x00, 0x00, 0x03, 0x00, 0x1c, 0x00
    /*02f0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*02f8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[32] ".nv.constant0._Z4test6float4PS_": Container({'st_name': 1562, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 22, 'st_value': 0, 'st_size': 0})
    /*0300*/ .byte 0x1a, 0x06, 0x00, 0x00, 0x03, 0x00, 0x16, 0x00
    /*0308*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0310*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[33] ".nv.rel.action": Container({'st_name': 1832, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 11, 'st_value': 0, 'st_size': 0})
    /*0318*/ .byte 0x28, 0x07, 0x00, 0x00, 0x03, 0x00, 0x0b, 0x00
    /*0320*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0328*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[34] "_Z7argtestPiS_S_": Container({'st_name': 50, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 23, 'st_value': 0, 'st_size': 2560})
    /*0330*/ .byte 0x32, 0x00, 0x00, 0x00, 0x12, 0x10, 0x17, 0x00
    /*0338*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0340*/ .byte 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[35] "texRef2d": Container({'st_name': 144, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_LOOS'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0348*/ .byte 0x90, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00
    /*0350*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0358*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[36] "texRef1d": Container({'st_name': 153, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_LOOS'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0360*/ .byte 0x99, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00
    /*0368*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0370*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[37] "inputSurfRef": Container({'st_name': 162, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_HIOS'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0378*/ .byte 0xa2, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00
    /*0380*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0388*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[38] "outputSurfRef": Container({'st_name': 175, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_HIOS'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0390*/ .byte 0xaf, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00
    /*0398*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*03a0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[39] "vprintf": Container({'st_name': 285, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*03a8*/ .byte 0x1d, 0x01, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00
    /*03b0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*03b8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[40] "_Z11shared_testfPf": Container({'st_name': 762, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 24, 'st_value': 0, 'st_size': 384})
    /*03c0*/ .byte 0xfa, 0x02, 0x00, 0x00, 0x12, 0x10, 0x18, 0x00
    /*03c8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*03d0*/ .byte 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[41] "_Z11nvinfo_testiiPi": Container({'st_name': 962, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 25, 'st_value': 0, 'st_size': 192})
    /*03d8*/ .byte 0xc2, 0x03, 0x00, 0x00, 0x12, 0x10, 0x19, 0x00
    /*03e0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*03e8*/ .byte 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[42] "_Z5childPii": Container({'st_name': 1131, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 26, 'st_value': 0, 'st_size': 576})
    /*03f0*/ .byte 0x6b, 0x04, 0x00, 0x00, 0x12, 0x10, 0x1a, 0x00
    /*03f8*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0400*/ .byte 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[43] "_Z10local_testiiPi": Container({'st_name': 1274, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 27, 'st_value': 0, 'st_size': 320})
    /*0408*/ .byte 0xfa, 0x04, 0x00, 0x00, 0x12, 0x10, 0x1b, 0x00
    /*0410*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0418*/ .byte 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[44] "_Z4test6float4PS_": Container({'st_name': 1437, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'visibility': 'STV_DEFAULT'}), 'st_shndx': 28, 'st_value': 0, 'st_size': 832})
    /*0420*/ .byte 0x9d, 0x05, 0x00, 0x00, 0x12, 0x10, 0x1c, 0x00
    /*0428*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0430*/ .byte 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x29 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0xf80 	// maybe updated by assembler
	.__section_size         0x21c 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_20 - .L_19)
  	.align		4
  .L_19:
          /*0004*/ 	.word	index@(_Z4test6float4PS_)
          /*0008*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_20:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_22 - .L_21)
  	.align		4
  .L_21:
          /*0010*/ 	.word	index@(_Z4test6float4PS_)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_22:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_24 - .L_23)
  	.align		4
  .L_23:
          /*001c*/ 	.word	index@(_Z4test6float4PS_)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_24:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_26 - .L_25)
  	.align		4
  .L_25:
          /*0028*/ 	.word	index@(_Z4test6float4PS_)
          /*002c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_26:
          /*0030*/ 	.byte	0x04, 0x2f
          /*0032*/ 	.short	(.L_28 - .L_27)
  	.align		4
  .L_27:
          /*0034*/ 	.word	index@(_Z10local_testiiPi)
          /*0038*/ 	.word	0x0000000b
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_28:
          /*003c*/ 	.byte	0x04, 0x23
          /*003e*/ 	.short	(.L_30 - .L_29)
  	.align		4
  .L_29:
          /*0040*/ 	.word	index@(_Z10local_testiiPi)
          /*0044*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_30:
          /*0048*/ 	.byte	0x04, 0x12
          /*004a*/ 	.short	(.L_32 - .L_31)
  	.align		4
  .L_31:
          /*004c*/ 	.word	index@(_Z10local_testiiPi)
          /*0050*/ 	.word	0x00000048
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_32:
          /*0054*/ 	.byte	0x04, 0x11
          /*0056*/ 	.short	(.L_34 - .L_33)
  	.align		4
  .L_33:
          /*0058*/ 	.word	index@(_Z10local_testiiPi)
          /*005c*/ 	.word	0x00000048
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_34:
          /*0060*/ 	.byte	0x04, 0x2f
          /*0062*/ 	.short	(.L_36 - .L_35)
  	.align		4
  .L_35:
          /*0064*/ 	.word	index@(_Z5childPii)
          /*0068*/ 	.word	0x0000000b
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_36:
          /*006c*/ 	.byte	0x04, 0x23
          /*006e*/ 	.short	(.L_38 - .L_37)
  	.align		4
  .L_37:
          /*0070*/ 	.word	index@(_Z5childPii)
          /*0074*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_38:
          /*0078*/ 	.byte	0x04, 0x12
          /*007a*/ 	.short	(.L_40 - .L_39)
  	.align		4
  .L_39:
          /*007c*/ 	.word	index@(_Z5childPii)
          /*0080*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_40:
          /*0084*/ 	.byte	0x04, 0x11
          /*0086*/ 	.short	(.L_42 - .L_41)
  	.align		4
  .L_41:
          /*0088*/ 	.word	index@(_Z5childPii)
          /*008c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_42:
          /*0090*/ 	.byte	0x04, 0x2f
          /*0092*/ 	.short	(.L_44 - .L_43)
  	.align		4
  .L_43:
          /*0094*/ 	.word	index@(_Z11nvinfo_testiiPi)
          /*0098*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_44:
          /*009c*/ 	.byte	0x04, 0x23
          /*009e*/ 	.short	(.L_46 - .L_45)
  	.align		4
  .L_45:
          /*00a0*/ 	.word	index@(_Z11nvinfo_testiiPi)
          /*00a4*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_46:
          /*00a8*/ 	.byte	0x04, 0x12
          /*00aa*/ 	.short	(.L_48 - .L_47)
  	.align		4
  .L_47:
          /*00ac*/ 	.word	index@(_Z11nvinfo_testiiPi)
          /*00b0*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_48:
          /*00b4*/ 	.byte	0x04, 0x11
          /*00b6*/ 	.short	(.L_50 - .L_49)
  	.align		4
  .L_49:
          /*00b8*/ 	.word	index@(_Z11nvinfo_testiiPi)
          /*00bc*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_50:
          /*00c0*/ 	.byte	0x04, 0x2f
          /*00c2*/ 	.short	(.L_52 - .L_51)
  	.align		4
  .L_51:
          /*00c4*/ 	.word	index@(_Z11shared_testfPf)
          /*00c8*/ 	.word	0x0000000a
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_52:
          /*00cc*/ 	.byte	0x04, 0x23
          /*00ce*/ 	.short	(.L_54 - .L_53)
  	.align		4
  .L_53:
          /*00d0*/ 	.word	index@(_Z11shared_testfPf)
          /*00d4*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_54:
          /*00d8*/ 	.byte	0x04, 0x12
          /*00da*/ 	.short	(.L_56 - .L_55)
  	.align		4
  .L_55:
          /*00dc*/ 	.word	index@(_Z11shared_testfPf)
          /*00e0*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_56:
          /*00e4*/ 	.byte	0x04, 0x11
          /*00e6*/ 	.short	(.L_58 - .L_57)
  	.align		4
  .L_57:
          /*00e8*/ 	.word	index@(_Z11shared_testfPf)
          /*00ec*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_58:
          /*00f0*/ 	.byte	0x04, 0x2f
          /*00f2*/ 	.short	(.L_60 - .L_59)
  	.align		4
  .L_59:
          /*00f4*/ 	.word	index@(_Z7argtestPiS_S_)
          /*00f8*/ 	.word	0x00000019
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_60:
          /*00fc*/ 	.byte	0x04, 0x23
          /*00fe*/ 	.short	(.L_62 - .L_61)
  	.align		4
  .L_61:
          /*0100*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f7ii)
          /*0104*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_62:
          /*0108*/ 	.byte	0x04, 0x12
          /*010a*/ 	.short	(.L_64 - .L_63)
  	.align		4
  .L_63:
          /*010c*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f7ii)
          /*0110*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_64:
          /*0114*/ 	.byte	0x04, 0x11
          /*0116*/ 	.short	(.L_66 - .L_65)
  	.align		4
  .L_65:
          /*0118*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f7ii)
          /*011c*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_66:
          /*0120*/ 	.byte	0x04, 0x23
          /*0122*/ 	.short	(.L_68 - .L_67)
  	.align		4
  .L_67:
          /*0124*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f6ii)
          /*0128*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_68:
          /*012c*/ 	.byte	0x04, 0x12
          /*012e*/ 	.short	(.L_70 - .L_69)
  	.align		4
  .L_69:
          /*0130*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f6ii)
          /*0134*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_70:
          /*0138*/ 	.byte	0x04, 0x11
          /*013a*/ 	.short	(.L_72 - .L_71)
  	.align		4
  .L_71:
          /*013c*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f6ii)
          /*0140*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_72:
          /*0144*/ 	.byte	0x04, 0x23
          /*0146*/ 	.short	(.L_74 - .L_73)
  	.align		4
  .L_73:
          /*0148*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f5ii)
          /*014c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_74:
          /*0150*/ 	.byte	0x04, 0x12
          /*0152*/ 	.short	(.L_76 - .L_75)
  	.align		4
  .L_75:
          /*0154*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f5ii)
          /*0158*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_76:
          /*015c*/ 	.byte	0x04, 0x11
          /*015e*/ 	.short	(.L_78 - .L_77)
  	.align		4
  .L_77:
          /*0160*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f5ii)
          /*0164*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_78:
          /*0168*/ 	.byte	0x04, 0x23
          /*016a*/ 	.short	(.L_80 - .L_79)
  	.align		4
  .L_79:
          /*016c*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f4ii)
          /*0170*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_80:
          /*0174*/ 	.byte	0x04, 0x12
          /*0176*/ 	.short	(.L_82 - .L_81)
  	.align		4
  .L_81:
          /*0178*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f4ii)
          /*017c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_82:
          /*0180*/ 	.byte	0x04, 0x11
          /*0182*/ 	.short	(.L_84 - .L_83)
  	.align		4
  .L_83:
          /*0184*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f4ii)
          /*0188*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_84:
          /*018c*/ 	.byte	0x04, 0x23
          /*018e*/ 	.short	(.L_86 - .L_85)
  	.align		4
  .L_85:
          /*0190*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f3ii)
          /*0194*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_86:
          /*0198*/ 	.byte	0x04, 0x12
          /*019a*/ 	.short	(.L_88 - .L_87)
  	.align		4
  .L_87:
          /*019c*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f3ii)
          /*01a0*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_88:
          /*01a4*/ 	.byte	0x04, 0x11
          /*01a6*/ 	.short	(.L_90 - .L_89)
  	.align		4
  .L_89:
          /*01a8*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f3ii)
          /*01ac*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_90:
          /*01b0*/ 	.byte	0x04, 0x23
          /*01b2*/ 	.short	(.L_92 - .L_91)
  	.align		4
  .L_91:
          /*01b4*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f2ii)
          /*01b8*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_92:
          /*01bc*/ 	.byte	0x04, 0x12
          /*01be*/ 	.short	(.L_94 - .L_93)
  	.align		4
  .L_93:
          /*01c0*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f2ii)
          /*01c4*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_94:
          /*01c8*/ 	.byte	0x04, 0x11
          /*01ca*/ 	.short	(.L_96 - .L_95)
  	.align		4
  .L_95:
          /*01cc*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f2ii)
          /*01d0*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_96:
          /*01d4*/ 	.byte	0x04, 0x23
          /*01d6*/ 	.short	(.L_98 - .L_97)
  	.align		4
  .L_97:
          /*01d8*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f1ii)
          /*01dc*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_98:
          /*01e0*/ 	.byte	0x04, 0x12
          /*01e2*/ 	.short	(.L_100 - .L_99)
  	.align		4
  .L_99:
          /*01e4*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f1ii)
          /*01e8*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_100:
          /*01ec*/ 	.byte	0x04, 0x11
          /*01ee*/ 	.short	(.L_102 - .L_101)
  	.align		4
  .L_101:
          /*01f0*/ 	.word	index@($_Z7argtestPiS_S_$_Z2f1ii)
          /*01f4*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_102:
          /*01f8*/ 	.byte	0x04, 0x23
          /*01fa*/ 	.short	(.L_104 - .L_103)
  	.align		4
  .L_103:
          /*01fc*/ 	.word	index@(_Z7argtestPiS_S_)
          /*0200*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_104:
          /*0204*/ 	.byte	0x04, 0x12
          /*0206*/ 	.short	(.L_106 - .L_105)
  	.align		4
  .L_105:
          /*0208*/ 	.word	index@(_Z7argtestPiS_S_)
          /*020c*/ 	.word	0x00000030
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_106:
          /*0210*/ 	.byte	0x04, 0x11
          /*0212*/ 	.short	(.L_108 - .L_107)
  	.align		4
  .L_107:
          /*0214*/ 	.word	index@(_Z7argtestPiS_S_)
          /*0218*/ 	.word	0x00000028
  .L_108:
  
  
// --------------------- .nv.info._Z7argtestPiS_S_        --------------------------
	.section	.nv.info._Z7argtestPiS_S_,"",@"SHT_CUDA_INFO"
	.__section_name         0x49 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x119c 	// maybe updated by assembler
	.__section_size         0xc0 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x17
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_110 - .L_109)
  .L_109:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_110:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_112 - .L_111)
  	.align		4
  .L_111:
          /*0014*/ 	.word	index@(.nv.constant0._Z7argtestPiS_S_)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_112:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_114 - .L_113)
  .L_113:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0002
          /*002a*/ 	.short	0x0010
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_114:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_116 - .L_115)
  .L_115:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0001
          /*003a*/ 	.short	0x0008
          /*003c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_116:
          /*0040*/ 	.byte	0x04, 0x17
          /*0042*/ 	.short	(.L_118 - .L_117)
  .L_117:
          /*0044*/ 	.word	0x00000000
          /*0048*/ 	.short	0x0000
          /*004a*/ 	.short	0x0000
          /*004c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_118:
          /*0050*/ 	.byte	0x03, 0x1b
          /*0052*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_BINDLESS_SURFACE_BANK
  	.align		4
          /*0054*/ 	.byte	0x02, 0x16
  	.zero		1
  	.zero		1
  
  
  	//----- nvinfo : EIATTR_BINDLESS_TEXTURE_BANK
  	.align		4
          /*0058*/ 	.byte	0x02, 0x15
  	.zero		1
  	.zero		1
  
  
  	//----- nvinfo : EIATTR_EXTERNS
  	.align		4
          /*005c*/ 	.byte	0x04, 0x0f
          /*005e*/ 	.short	(.L_120 - .L_119)
  
  
  	//   ....[0]....
  	.align		4
  .L_119:
          /*0060*/ 	.word	index@(vprintf)
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
  .L_120:
          /*0064*/ 	.byte	0x04, 0x1d
          /*0066*/ 	.short	(.L_122 - .L_121)
  
  
  	//   ....[0]....
  .L_121:
          /*0068*/ 	.word	0x00000030
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_122:
          /*006c*/ 	.byte	0x04, 0x1c
          /*006e*/ 	.short	(.L_124 - .L_123)
  
  
  	//   ....[0]....
  .L_123:
          /*0070*/ 	.word	0x000005c8
  
  
  	//   ....[1]....
          /*0074*/ 	.word	0x00000648
  
  
  	//----- nvinfo : EIATTR_INDIRECT_BRANCH_TARGETS
  	.align		4
  .L_124:
          /*0078*/ 	.byte	0x04, 0x34
          /*007a*/ 	.short	(.L_126 - .L_125)
  
  
  	//   ....[0]....
  .L_125:
          /*007c*/ 	.word	.L_127@srel
          /*0080*/ 	.short	0x1
          /*0082*/ 	.short	0x0
          /*0084*/ 	.word	0x0
  
  
  	//   ....[1]....
          /*0088*/ 	.word	(.L_128@srel + 0x8)
          /*008c*/ 	.short	0x0
          /*008e*/ 	.short	0x0
          /*0090*/ 	.word	0x1
          /*0094*/ 	.word	.L_10@srel
  
  
  	//   ....[2]....
          /*0098*/ 	.word	(.L_130@srel + 0x10)
          /*009c*/ 	.short	0x0
          /*009e*/ 	.short	0x0
          /*00a0*/ 	.word	0x1
          /*00a4*/ 	.word	.L_10@srel
  
  
  	//   ....[3]....
          /*00a8*/ 	.word	(.L_11@srel + 0x8)
          /*00ac*/ 	.short	0x0
          /*00ae*/ 	.short	0x0
          /*00b0*/ 	.word	0x1
          /*00b4*/ 	.word	.L_10@srel
  
  
  	//----- nvinfo : EIATTR_CRS_STACK_SIZE
  	.align		4
  .L_126:
          /*00b8*/ 	.byte	0x04, 0x1e
          /*00ba*/ 	.short	(.L_135 - .L_134)
  .L_134:
          /*00bc*/ 	.word	0x00000220
  .L_135:
  
  
// --------------------- .nv.info._Z11shared_testfPf      --------------------------
	.section	.nv.info._Z11shared_testfPf,"",@"SHT_CUDA_INFO"
	.__section_name         0x11a 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x125c 	// maybe updated by assembler
	.__section_size         0x54 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x18
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_137 - .L_136)
  .L_136:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_137:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_139 - .L_138)
  	.align		4
  .L_138:
          /*0014*/ 	.word	index@(.nv.constant0._Z11shared_testfPf)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_139:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_141 - .L_140)
  .L_140:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0001
          /*002a*/ 	.short	0x0008
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_141:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_143 - .L_142)
  .L_142:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0000
          /*003a*/ 	.short	0x0000
          /*003c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_143:
          /*0040*/ 	.byte	0x03, 0x1b
          /*0042*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
          /*0044*/ 	.byte	0x04, 0x1d
          /*0046*/ 	.short	(.L_145 - .L_144)
  
  
  	//   ....[0]....
  .L_144:
          /*0048*/ 	.word	0x00000018
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_145:
          /*004c*/ 	.byte	0x04, 0x1c
          /*004e*/ 	.short	(.L_147 - .L_146)
  
  
  	//   ....[0]....
  .L_146:
          /*0050*/ 	.word	0x00000168
  .L_147:
  
  
// --------------------- .nv.info._Z11nvinfo_testiiPi     --------------------------
	.section	.nv.info._Z11nvinfo_testiiPi,"",@"SHT_CUDA_INFO"
	.__section_name         0x18f 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x12b0 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x19
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_149 - .L_148)
  .L_148:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_149:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_151 - .L_150)
  	.align		4
  .L_150:
          /*0014*/ 	.word	index@(.nv.constant0._Z11nvinfo_testiiPi)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_151:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_153 - .L_152)
  .L_152:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0002
          /*002a*/ 	.short	0x0008
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_153:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_155 - .L_154)
  .L_154:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0001
          /*003a*/ 	.short	0x0004
          /*003c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_155:
          /*0040*/ 	.byte	0x04, 0x17
          /*0042*/ 	.short	(.L_157 - .L_156)
  .L_156:
          /*0044*/ 	.word	0x00000000
          /*0048*/ 	.short	0x0000
          /*004a*/ 	.short	0x0000
          /*004c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_157:
          /*0050*/ 	.byte	0x03, 0x1b
          /*0052*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
          /*0054*/ 	.byte	0x04, 0x1d
          /*0056*/ 	.short	(.L_159 - .L_158)
  
  
  	//   ....[0]....
  .L_158:
          /*0058*/ 	.word	0x00000018
  
  
  	//   ....[1]....
          /*005c*/ 	.word	0x00000030
  
  
  	//   ....[2]....
          /*0060*/ 	.word	0x00000070
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_159:
          /*0064*/ 	.byte	0x04, 0x1c
          /*0066*/ 	.short	(.L_161 - .L_160)
  
  
  	//   ....[0]....
  .L_160:
          /*0068*/ 	.word	0x000000a8
  
  
  	//----- nvinfo : EIATTR_CTAIDZ_USED
  	.align		4
  .L_161:
          /*006c*/ 	.byte	0x01, 0x04
  	.zero		2
  
  
// --------------------- .nv.info._Z5childPii             --------------------------
	.section	.nv.info._Z5childPii,"",@"SHT_CUDA_INFO"
	.__section_name         0x1ff 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x1320 	// maybe updated by assembler
	.__section_size         0x54 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x1a
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_163 - .L_162)
  .L_162:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_163:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_165 - .L_164)
  	.align		4
  .L_164:
          /*0014*/ 	.word	index@(.nv.constant0._Z5childPii)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x000c
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_165:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x000c
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_167 - .L_166)
  .L_166:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0001
          /*002a*/ 	.short	0x0008
          /*002c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_167:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_169 - .L_168)
  .L_168:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0000
          /*003a*/ 	.short	0x0000
          /*003c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_169:
          /*0040*/ 	.byte	0x03, 0x1b
          /*0042*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
          /*0044*/ 	.byte	0x04, 0x1d
          /*0046*/ 	.short	(.L_171 - .L_170)
  
  
  	//   ....[0]....
  .L_170:
          /*0048*/ 	.word	0x00000028
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_171:
          /*004c*/ 	.byte	0x04, 0x1c
          /*004e*/ 	.short	(.L_173 - .L_172)
  
  
  	//   ....[0]....
  .L_172:
          /*0050*/ 	.word	0x00000208
  .L_173:
  
  
// --------------------- .nv.info._Z10local_testiiPi      --------------------------
	.section	.nv.info._Z10local_testiiPi,"",@"SHT_CUDA_INFO"
	.__section_name         0x274 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x1374 	// maybe updated by assembler
	.__section_size         0x64 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x1b
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_175 - .L_174)
  .L_174:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_175:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_177 - .L_176)
  	.align		4
  .L_176:
          /*0014*/ 	.word	index@(.nv.constant0._Z10local_testiiPi)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_177:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0010
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_179 - .L_178)
  .L_178:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0002
          /*002a*/ 	.short	0x0008
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_179:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_181 - .L_180)
  .L_180:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0001
          /*003a*/ 	.short	0x0004
          /*003c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_181:
          /*0040*/ 	.byte	0x04, 0x17
          /*0042*/ 	.short	(.L_183 - .L_182)
  .L_182:
          /*0044*/ 	.word	0x00000000
          /*0048*/ 	.short	0x0000
          /*004a*/ 	.short	0x0000
          /*004c*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_183:
          /*0050*/ 	.byte	0x03, 0x1b
          /*0052*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_S2RCTAID_INSTR_OFFSETS
  	.align		4
          /*0054*/ 	.byte	0x04, 0x1d
          /*0056*/ 	.short	(.L_185 - .L_184)
  
  
  	//   ....[0]....
  .L_184:
          /*0058*/ 	.word	0x00000030
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
  .L_185:
          /*005c*/ 	.byte	0x04, 0x1c
          /*005e*/ 	.short	(.L_187 - .L_186)
  
  
  	//   ....[0]....
  .L_186:
          /*0060*/ 	.word	0x00000110
  .L_187:
  
  
// --------------------- .nv.info._Z4test6float4PS_       --------------------------
	.section	.nv.info._Z4test6float4PS_,"",@"SHT_CUDA_INFO"
	.__section_name         0x2e7 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x13d8 	// maybe updated by assembler
	.__section_size         0x4c 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x1c
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_189 - .L_188)
  .L_188:
          /*0004*/ 	.word	0x0000006f
  
  
  	//----- nvinfo : EIATTR_SW2393858_WAR
  	.align		4
  .L_189:
          /*0008*/ 	.byte	0x01, 0x30
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_SW1850030_WAR
  	.align		4
          /*000c*/ 	.byte	0x01, 0x2a
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*0010*/ 	.byte	0x04, 0x0a
          /*0012*/ 	.short	(.L_191 - .L_190)
  	.align		4
  .L_190:
          /*0014*/ 	.word	index@(.nv.constant0._Z4test6float4PS_)
          /*0018*/ 	.short	0x0140
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_191:
          /*001c*/ 	.byte	0x03, 0x19
          /*001e*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*0020*/ 	.byte	0x04, 0x17
          /*0022*/ 	.short	(.L_193 - .L_192)
  .L_192:
          /*0024*/ 	.word	0x00000000
          /*0028*/ 	.short	0x0001
          /*002a*/ 	.short	0x0010
          /*002c*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_193:
          /*0030*/ 	.byte	0x04, 0x17
          /*0032*/ 	.short	(.L_195 - .L_194)
  .L_194:
          /*0034*/ 	.word	0x00000000
          /*0038*/ 	.short	0x0000
          /*003a*/ 	.short	0x0000
          /*003c*/ 	.byte	0x00, 0xf0, 0x41, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_195:
          /*0040*/ 	.byte	0x03, 0x1b
          /*0042*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0044*/ 	.byte	0x04, 0x1c
          /*0046*/ 	.short	(.L_197 - .L_196)
  
  
  	//   ....[0]....
  .L_196:
          /*0048*/ 	.word	0x000002f8
  .L_197:
  
  
// --------------------- .nv.rel.action                   --------------------------
	.section	.nv.rel.action,"",@"SHT_CUDA_RELOCINFO"
	.__section_name         0x3bd 	// offset in .shstrtab
	.__section_type         1879048203
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x1428 	// maybe updated by assembler
	.__section_size         0xd0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      8
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.sectionentsize	8
          /*0000*/ 	.byte	0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x08, 0x10, 0x0a, 0x2f, 0x22
          /*0010*/ 	.byte	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0020*/ 	.byte	0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0050*/ 	.byte	0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0060*/ 	.byte	0x01, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0070*/ 	.byte	0x01, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0080*/ 	.byte	0x01, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0090*/ 	.byte	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00a0*/ 	.byte	0x02, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00b0*/ 	.byte	0x02, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00c0*/ 	.byte	0x02, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .rel.text._Z7argtestPiS_S_       --------------------------
	.section  ".rel.text._Z7argtestPiS_S_", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0xc7 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x14f8 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x17
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : vprintf, Container({'r_offset': 1576, 'r_info': 167503724586, 'r_info_sym': 39, 'r_info_type': 42})
    // Relocation[1] : $str, Container({'r_offset': 1544, 'r_info': 47244640300, 'r_info_sym': 11, 'r_info_type': 44})
    // Relocation[2] : $str, Container({'r_offset': 1528, 'r_info': 47244640299, 'r_info_sym': 11, 'r_info_type': 43})
    // Relocation[3] : __cudart_i2opi_f, Container({'r_offset': 456, 'r_info': 51539607596, 'r_info_sym': 12, 'r_info_type': 44})
    // Relocation[4] : __cudart_i2opi_f, Container({'r_offset': 440, 'r_info': 51539607595, 'r_info_sym': 12, 'r_info_type': 43})
    // Relocation[5] : flist, Container({'r_offset': 80, 'r_info': 42949673004, 'r_info_sym': 10, 'r_info_type': 44})
    // Relocation[6] : flist, Container({'r_offset': 56, 'r_info': 42949673003, 'r_info_sym': 10, 'r_info_type': 43})

// --------------------- .rel.text._Z5childPii            --------------------------
	.section  ".rel.text._Z5childPii", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x22b 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x1568 	// maybe updated by assembler
	.__section_size         0x40 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x1a
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : GlobalC1, Container({'r_offset': 304, 'r_info': 30064771116, 'r_info_sym': 7, 'r_info_type': 44})
    // Relocation[1] : GlobalC1, Container({'r_offset': 280, 'r_info': 30064771115, 'r_info_sym': 7, 'r_info_type': 43})
    // Relocation[2] : GlobalC2, Container({'r_offset': 248, 'r_info': 34359738412, 'r_info_sym': 8, 'r_info_type': 44})
    // Relocation[3] : GlobalC2, Container({'r_offset': 200, 'r_info': 34359738411, 'r_info_sym': 8, 'r_info_type': 43})

// --------------------- .rel.nv.constant0._Z7argtestPiS_S_ --------------------------
	.section  ".rel.nv.constant0._Z7argtestPiS_S_", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x39a 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x15a8 	// maybe updated by assembler
	.__section_size         0x40 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x11
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : outputSurfRef, Container({'r_offset': 356, 'r_info': 163208757300, 'r_info_sym': 38, 'r_info_type': 52})
    // Relocation[1] : inputSurfRef, Container({'r_offset': 352, 'r_info': 158913790004, 'r_info_sym': 37, 'r_info_type': 52})
    // Relocation[2] : texRef1d, Container({'r_offset': 348, 'r_info': 154618822662, 'r_info_sym': 36, 'r_info_type': 6})
    // Relocation[3] : texRef2d, Container({'r_offset': 344, 'r_info': 150323855366, 'r_info_sym': 35, 'r_info_type': 6})

// --------------------- .nv.constant3                    --------------------------
	.section	.nv.constant3,"a",@progbits
	.__section_name         0x7f 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x15e8 	// maybe updated by assembler
	.__section_size         0x141 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  	.type		C1,@object
  	.size		C1,(C2 - C1)
  C1:
  .nv.constant3:
  	.zero		44
  	.type		C2,@object
  	.size		C2,(C3 - C2)
  C2:
  	.zero		260
  	.type		C3,@object
  	.size		C3,(.L_3 - C3)
  C3:
  	.zero		17
  .L_3:
  
  
// --------------------- .nv.constant2._Z7argtestPiS_S_   --------------------------
	.section	.nv.constant2._Z7argtestPiS_S_,"a",@progbits
	.__section_name         0xa8 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x172c 	// maybe updated by assembler
	.__section_size         0x6c 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x17
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant2._Z7argtestPiS_S_:
          /*0000*/ 	.byte	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0010*/ 	.byte	0x58, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0020*/ 	.byte	0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0xda, 0x0f, 0xc9, 0xbf, 0x68, 0x21, 0xa2, 0xb3, 0xc5, 0x34, 0xc2, 0xa7, 0x80, 0x47, 0xce, 0x47
          /*0050*/ 	.byte	0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x3f, 0x19, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0xf9, 0x3b
          /*0060*/ 	.byte	0x00, 0xac, 0xcb, 0x37, 0xe4, 0x85, 0x08, 0x3c, 0xa8, 0xaa, 0x2a, 0xbe
  
  
// --------------------- .nv.constant0._Z7argtestPiS_S_   --------------------------
	.section	.nv.constant0._Z7argtestPiS_S_,"a",@progbits
	.__section_name         0xe2 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1798 	// maybe updated by assembler
	.__section_size         0x168 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x17
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z7argtestPiS_S_:
  	.zero		344
  	.align		4
          /*0158*/ 	.word	[20@lo(0x0)=texRef2d]
  	.align		4
          /*015c*/ 	.word	[20@lo(0x0)=texRef1d]
  	.align		4
          /*0160*/ 	.word	[20@lo(0x0)=fun@R_CUDA_SURF_HEADER_INDEX(inputSurfRef)]
  	.align		4
          /*0164*/ 	.word	[20@lo(0x0)=fun@R_CUDA_SURF_HEADER_INDEX(outputSurfRef)]
  
  
// --------------------- .nv.constant0._Z11shared_testfPf --------------------------
	.section	.nv.constant0._Z11shared_testfPf,"a",@progbits
	.__section_name         0x154 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1900 	// maybe updated by assembler
	.__section_size         0x150 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x18
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z11shared_testfPf:
  	.zero		336
  
  
// --------------------- .nv.constant0._Z11nvinfo_testiiPi --------------------------
	.section	.nv.constant0._Z11nvinfo_testiiPi,"a",@progbits
	.__section_name         0x1cb 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1a50 	// maybe updated by assembler
	.__section_size         0x150 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x19
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z11nvinfo_testiiPi:
  	.zero		336
  
  
// --------------------- .nv.constant0._Z5childPii        --------------------------
	.section	.nv.constant0._Z5childPii,"a",@progbits
	.__section_name         0x241 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1ba0 	// maybe updated by assembler
	.__section_size         0x14c 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1a
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z5childPii:
  	.zero		332
  
  
// --------------------- .nv.constant0._Z10local_testiiPi --------------------------
	.section	.nv.constant0._Z10local_testiiPi,"a",@progbits
	.__section_name         0x2ae 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1cec 	// maybe updated by assembler
	.__section_size         0x150 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1b
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z10local_testiiPi:
  	.zero		336
  
  
// --------------------- .nv.constant0._Z4test6float4PS_  --------------------------
	.section	.nv.constant0._Z4test6float4PS_,"a",@progbits
	.__section_name         0x31f 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x1e3c 	// maybe updated by assembler
	.__section_size         0x158 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1c
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z4test6float4PS_:
  	.zero		344
  
  
// --------------------- .text._Z7argtestPiS_S_           --------------------------
	.section	.text._Z7argtestPiS_S_,"ax",@progbits
	.__section_name         0x32 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x1fa0 	// maybe updated by assembler
	.__section_size         0xa00 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x19000022
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=25"
  	.align	32
          .global         _Z7argtestPiS_S_
          .type           _Z7argtestPiS_S_,@function
          .size           _Z7argtestPiS_S_,(.L_204 - _Z7argtestPiS_S_)
          .other          _Z7argtestPiS_S_,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z7argtestPiS_S_:
  .text._Z7argtestPiS_S_:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W-:-:S00]         /*0010*/         {         MOV R20, c[0x0][0x140] ;
      [----:B------:R-:W0:-:S01]         /*0018*/                   S2R R2, SR_TID.X         }
      [----:B------:R-:W-:-:S00]         /*0028*/         {         MOV R21, c[0x0][0x144] ;
      [----:B------:R-:W0:-:S02]         /*0030*/                   S2R R17, SR_CTAID.X         }
      [----:B------:R-:W-:-:S00]         /*0038*/         {         MOV32I R6, 32@lo(flist) ;
      [----:B------:R-:W5:-:S01]         /*0048*/                   LDG.E R0, [R20]         }
      [----:B------:R-:W-:-:S15]         /*0050*/                   MOV32I R3, 32@hi(flist) ;
      [----:B0-----:R-:W-:-:S01]         /*0058*/                   XMAD R2, R17, c[0x0] [0x8], R2 ;
      [----:B-----5:R-:W-:-:S01]         /*0068*/                   ISCADD R6.CC, R0.reuse, R6, 0x3 ;
      [----:B------:R-:W-:Y:S06]         /*0070*/                   SHR R0, R0, 0x1d ;
      [----:B------:R-:W-:Y:S02]         /*0078*/                   IADD.X R7, R3, R0 ;
      [----:B------:R-:W5:-:S01]         /*0088*/                   LDG.E R0, [R6] ;
      [----:B------:R-:W-:Y:S06]         /*0090*/                   XMAD.MRG R3, R17, c[0x0] [0x8].H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*0098*/                   XMAD.PSL.CBCC R17, R17.H1, R3.H1, R2 ;
      [----:B------:R-:W-:-:S01]         /*00a8*/                   SHR R2, R17.reuse, 0x1e ;
      [----:B------:R-:W-:Y:S06]         /*00b0*/                   ISCADD R18.CC, R17, c[0x0][0x148], 0x2 ;
      [----:B------:R-:W-:Y:S02]         /*00b8*/                   IADD.X R19, R2, c[0x0][0x14c] ;
      [----:B------:R0:W5:-:S01]         /*00c8*/                   LDG.E R5, [R18] ;
      [----:B------:R-:W-:Y:S01]         /*00d0*/                   IADD32I R1, R1, -0x28 ;
      [----:B------:R-:W-:Y:S03]         /*00d8*/                   MOV R4, R17 ;
      [----:B------:R-:W-:-:S03]         /*00e8*/                   DEPBAR.LE SB5, 0x1 ;
      [----:B------:R0:W1:-:S02]         /*00f0*/                   LDC R2, c[0x2][R0] ;
      [----:B------:R-:W-:-:S01]         /*00f8*/                   PRET `(.L_9) ;
  .L_127:
      [----:B01---5:R-:W-:-:S13]         /*0108*/                   BRX R2 -0x110                                  (*"INDIRECT_CALL"*);
  .L_9:
      [----:B------:R-:W0:-:S01]         /*0110*/                   I2F.F32.S32 R9, R4 ;
      [----:B------:R-:W-:-:S13]         /*0118*/                   PBK `(.L_10) ;
      [----:B0-----:R-:W-:-:S06]         /*0128*/                   FMUL32I R0, R9, 0.34999999403953552246 ;
      [----:B------:R-:W-:-:S02]         /*0130*/                   FMUL32I R2, R0.reuse, 0.63661974668502807617 ;
      [----:B------:R-:W-:-:S00]         /*0138*/         {         FSETP.GT.AND P0, PT, |R0|, c[0x2][0x4c], PT ;
      [----:B------:R-:W0:-:S02]         /*0148*/                   F2I.S32.F32 R2, R2         }
      [----:B0-----:R-:W0:-:S13]         /*0150*/                   I2F.F32.S32 R3, R2 ;
      [----:B0-----:R-:W-:-:S06]         /*0158*/                   FFMA R5, R3.reuse, c[0x2][0x40], R0 ;
      [----:B------:R-:W-:Y:S06]         /*0168*/                   FFMA R5, R3, c[0x2][0x44], R5 ;
  .L_128:
      [----:B------:R-:W-:-:S00]         /*0170*/         {         FFMA R3, R3, c[0x2][0x48], R5 ;
      [----:B------:R-:W-:-:S13]         /*0178*/              @!P0 BRK                                            (*"BRANCH_TARGETS .L_10"*)        }
      [----:B------:R-:W-:Y:S13]         /*0188*/                   FSETP.NEU.AND P0, PT, |R0|, +INF , PT ;
      [----:B------:R-:W-:-:S13]         /*0190*/              @!P0 BRA `(.L_11) ;
      [----:B------:R-:W-:-:S01]         /*0198*/                   BFE.U32 R2, R0.reuse, 0x817 ;
      [----:B------:R-:W-:Y:S05]         /*01a8*/                   SHL R4, R0, 0x8 ;
      [----:B------:R-:W-:Y:S01]         /*01b0*/                   IADD32I R3, R2, -0x80 ;
      [----:B------:R-:W-:Y:S01]         /*01b8*/                   MOV32I R11, 32@lo(__cudart_i2opi_f) ;
      [----:B------:R-:W-:Y:S01]         /*01c8*/                   MOV32I R5, 32@hi(__cudart_i2opi_f) ;
      [----:B------:R-:W-:Y:S01]         /*01d0*/                   MOV R8, RZ ;
      [----:B------:R-:W-:Y:S01]         /*01d8*/                   MOV R16, RZ ;
      [----:B------:R-:W-:Y:S01]         /*01e8*/                   MOV32I R6, 0xfffffffa ;
      [----:B------:R-:W-:Y:S01]         /*01f0*/                   MOV R2, R1 ;
      [----:B------:R-:W-:-:S01]         /*01f8*/                   LOP32I.OR R24, R4, 0x80000000 ;
      [----:B------:R-:W-:Y:S06]         /*0208*/                   SHR.U32 R15, R3, 0x5 ;
  .L_12:
      [----:B------:R-:W-:-:S02]         /*0210*/                   MOV R4, R11 ;
      [----:B------:R0:W5:-:S01]         /*0218*/                   LDG.E R3, [R4] ;
      [----:B------:R-:W-:-:S01]         /*0228*/                   IADD32I R6, R6, 0x1 ;
      [----:B------:R-:W-:-:S05]         /*0230*/                   IADD32I R11.CC, R11, 0x4 ;
      [----:B------:R-:W-:-:S01]         /*0238*/                   ISETP.NE.AND P0, PT, R6, RZ, PT ;
      [----:B0-----:R-:W-:Y:S07]         /*0248*/                   IADD.X R5, RZ, R5 ;
      [----:B-----5:R-:W-:-:S01]         /*0250*/                   XMAD R10, R3.reuse, R24.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0258*/                   XMAD.MRG R12, R3.reuse, R24.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0268*/                   XMAD R7, R3.reuse, R24.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S03]         /*0270*/                   XMAD R13, R3.H1.reuse, R24.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0278*/                   XMAD.CHI R14, R3.H1.reuse, R24, R10.reuse ;
      [----:B------:R-:W-:Y:S05]         /*0288*/                   XMAD.PSL.CBCC R3, R3.H1, R12.H1, R10 ;
      [----:B------:R-:W-:-:S01]         /*0290*/                   IADD3.RS R7, R14, R7, R13 ;
      [----:B------:R-:W-:-:S06]         /*0298*/                   IADD R3.CC, R3, R8 ;
      [----:B------:R0:W-:-:S01]         /*02a8*/                   STL [R2], R3 ;
      [----:B------:R-:W-:-:S01]         /*02b0*/                   IADD.X R8, R7, R16 ;
      [----:B0-----:R-:W-:-:S00]         /*02b8*/         {         IADD32I R2, R2, 0x4 ;
      [----:B------:R-:W-:-:S13]         /*02c8*/               @P0 BRA `(.L_12)         }
      [----:B------:R-:W-:-:S00]         /*02d0*/         {         BFE.U32 R12, R0, 0x517 ;
      [----:B------:R-:W-:-:S01]         /*02d8*/                   STL [R1+0x18], R8         }
      [----:B------:R-:W-:-:S05]         /*02e8*/                   IADD32I R2, -R15, 0x6 ;
      [----:B------:R-:W-:-:S01]         /*02f0*/                   ISETP.NE.AND P0, PT, R12, RZ, PT ;
      [----:B------:R-:W-:Y:S02]         /*02f8*/                   LEA R10, R2, R1, 0x2 ;
      [----:B------:R-:W5:-:S01]         /*0308*/                   LDL R2, [R10] ;
      [----:B------:R-:W5:-:S09]         /*0310*/                   LDL R3, [R10+-0x4] ;
      [----:B------:R-:W5:-:S01]         /*0318*/               @P0 LDL R6, [R10+-0x8] ;
      [----:B------:R-:W-:Y:S01]         /*0328*/               @P0 IADD32I R4, -R12, 0x20 ;
      [----:B------:R-:W-:-:S06]         /*0330*/                   LOP32I.AND R0, R0, 0x80000000 ;
      [----:B------:R-:W-:Y:S13]         /*0338*/                   ISETP.EQ.AND P2, PT, R0, RZ, PT ;
      [----:B-----5:R-:W-:-:S01]         /*0348*/               @P0 SHL R5, R2, R12.reuse ;
      [----:B------:R-:W-:-:S01]         /*0350*/               @P0 SHL R7, R3.reuse, R12 ;
      [----:B------:R-:W-:-:S01]         /*0358*/               @P0 SHR.U32 R6, R6, R4.reuse ;
      [----:B------:R-:W-:Y:S05]         /*0368*/               @P0 SHR.U32 R4, R3, R4 ;
      [----:B------:R-:W-:Y:S01]         /*0370*/               @P0 IADD R3, R6, R7 ;
      [----:B------:R-:W-:-:S06]         /*0378*/               @P0 IADD R2, R4, R5 ;
      [----:B------:R-:W-:-:S06]         /*0388*/                   SHF.L R5, R3.reuse, 0x2, R2 ;
      [----:B------:R-:W-:-:S06]         /*0390*/                   SHR.U32 R7, R5, 0x1f ;
      [----:B------:R-:W-:-:S01]         /*0398*/                   ISETP.NE.AND P1, PT, R7, RZ, PT ;
      [----:B------:R-:W-:Y:S12]         /*03a8*/                   SHL R8, R3, 0x2 ;
      [----:B------:R-:W-:-:S01]         /*03b0*/               @P1 LOP.PASS_B R3, RZ, ~R5 ;
      [----:B------:R-:W-:Y:S01]         /*03b8*/               @P1 ICMP.NE R4, RZ, 0x1, R8 ;
      [----:B------:R-:W-:Y:S01]         /*03c8*/               @P1 IADD R6, -R8, RZ ;
      [----:B------:R-:W-:Y:S04]         /*03d0*/              @!P1 MOV R6, R8 ;
      [----:B------:R-:W-:Y:S02]         /*03d8*/               @P1 IADD R5, R3, R4 ;
      [----:B------:R-:W-:-:S13]         /*03e8*/                   MOV R4, R6 ;
      [----:B------:R-:W0:-:S01]         /*03f0*/                   I2F.F64.S64 R4, R4 ;
      [----:B------:R-:W-:-:S01]         /*03f8*/               @P1 LOP.XOR.NZ P0, RZ, R0.reuse, c[0x2][0x50] ;
      [----:B------:R-:W-:-:S06]         /*0408*/              @!P1 ISETP.NE.AND P0, PT, R0, RZ, PT ;
      [----:B0-----:R-:W0:-:S01]         /*0410*/                   DMUL R4, R4, c[0x2][0x58] ;
      [----:B------:R-:W-:-:S07]         /*0418*/                   LEA.HI R2, R2, R7, RZ, 0x2 ;
      [----:B0-----:R-:W0:Y:S01]         /*0428*/                   F2F.F32.F64 R3, R4 ;
      [----:B------:R-:W-:Y:S07]         /*0430*/              @!P2 IADD R2, -R2, RZ ;
  .L_130:
      [----:B0-----:R-:W-:-:S00]         /*0438*/         {     @P0 FADD R3, -R3, -RZ ;
      [----:B------:R-:W-:-:S13]         /*0448*/                   BRK                                            (*"BRANCH_TARGETS .L_10"*)        }
  .L_11:
      [----:B------:R-:W-:-:S00]         /*0450*/         {         FMUL R3, RZ, R0 ;
      [----:B------:R-:W-:-:S13]         /*0458*/                   BRK                                            (*"BRANCH_TARGETS .L_10"*)        }
  .L_10:
      [----:B------:R-:W-:-:S01]         /*0468*/                   FADD R9, R9, 0.5 ;
      [----:B------:R-:W-:-:S05]         /*0470*/                   MOV R8, RZ ;
      [----:B------:R-:W-:-:S02]         /*0478*/                   FADD R4, R9, -1 ;
      [----:B------:R-:W5:-:S01]         /*0488*/                   TEXS.T RZ, R7, R9, R4, 0x56, 2D, R ;
      [----:B------:R-:W5:-:S15]         /*0490*/                   TEXS.P RZ, R8, R9, R8, 0x57, 2D, R ;
      [----:B------:R-:W-:Y:S01]         /*0498*/                   LOP32I.AND R12, R2, 0x1 ;
      [----:B------:R-:W-:-:S01]         /*04a8*/                   FMUL R11, R3.reuse, R3 ;
      [----:B------:R-:W-:-:S01]         /*04b0*/                   MOV32I R6, 0x3d2aaabb ;
      [----:B------:R-:W-:-:S01]         /*04b8*/                   MOV32I R0, 0xb94d4153 ;
      [----:B------:R-:W-:-:S02]         /*04c8*/                   MOV32I R10, 0xbeffffff ;
      [----:B------:R-:W-:-:S01]         /*04d0*/                   ISETP.NE.AND P0, PT, R12, RZ, PT ;
      [----:B------:R-:W-:Y:S12]         /*04d8*/                   ICMP.EQ R3, R3, c[0x2][0x54], R12 ;
      [----:B------:R-:W-:-:S13]         /*04e8*/               @P0 MOV32I R5, 0x3ab607ed ;
      [----:B------:R-:W-:Y:S01]         /*04f0*/               @P0 FFMA R0, R11, c[0x2][0x60], -R5 ;
      [----:B------:R-:W-:-:S01]         /*04f8*/                   ICMP.NE R5, R6, c[0x2][0x64], R12.reuse ;
      [----:B------:R-:W-:-:S01]         /*0508*/                   LOP.AND.NZ P0, RZ, R2, 0x2 ;
      [----:B------:R-:W-:-:S04]         /*0510*/                   ICMP.NE R6, R10, c[0x2][0x68], R12 ;
      [----:B------:R-:W-:-:S01]         /*0518*/                   FFMA R0, R11.reuse, R0, R5 ;
      [----:B------:R-:W-:-:S05]         /*0528*/                   FFMA R5, R3, R11, RZ ;
      [----:B------:R-:W-:Y:S06]         /*0530*/                   FFMA R0, R11, R0, R6 ;
      [----:B------:R-:W-:-:S06]         /*0538*/                   FFMA R0, R5, R0, R3 ;
      [----:B------:R-:W-:-:S01]         /*0548*/               @P0 FFMA R0, R0, -1, RZ ;
      [----:B------:R-:W-:-:S02]         /*0550*/                   SHL R16, R17, 0x2 ;
      [----:B------:R-:W5:-:S01]         /*0558*/                   SULD.D.BA.2D.TRAP R2, [R16], 0x58 ;
      [----:B------:R-:W-:-:S03]         /*0568*/                   DEPBAR.LE SB5, 0x1 ;
      [----:B------:R-:W-:Y:S06]         /*0570*/                   FADD R7, R7, R0 ;
      [----:B------:R-:W-:-:S02]         /*0578*/                   FADD R7, R7, R8 ;
      [----:B------:R-:W0:-:S13]         /*0588*/                   F2I.S32.F32.TRUNC R7, R7 ;
      [----:B0-----:R-:W-:-:S01]         /*0590*/                   STG.E [R18], R7 ;
      [----:B------:R-:W5:-:S01]         /*0598*/                   LDG.E R20, [R20+0x4] ;
      [----:B------:R-:W-:-:S03]         /*05a8*/                   DEPBAR.LE SB5, 0x1 ;
      [----:B------:R0:W-:-:S01]         /*05b0*/                   SUST.D.BA.2D.TRAP [R16], R2, 0x59 ;
      [----:B-----5:R-:W-:Y:S13]         /*05b8*/                   ISETP.NE.AND P0, PT, R20, R17, PT ;
      [----:B------:R-:W-:-:S13]         /*05c8*/               @P0 EXIT ;
      [----:B0-----:R-:W-:-:S00]         /*05d0*/         {         MOV R6, c[0x0][0x4] ;
      [----:B------:R-:W5:-:S01]         /*05d8*/                   LDG.E R3, [R18]         }
      [----:B------:R-:W-:-:S05]         /*05e8*/                   MOV R2, R17 ;
      [----:B------:R-:W-:Y:S01]         /*05f0*/                   IADD3 R6.CC, R1, 0x20, R6 ;
      [----:B------:R-:W-:Y:S01]         /*05f8*/                   MOV32I R4, 32@lo($str) ;
      [----:B------:R-:W-:-:S04]         /*0608*/                   MOV32I R5, 32@hi($str) ;
      [----:B------:R-:W-:Y:S07]         /*0610*/                   IADD3.X R7, RZ, c[0x0][0x104], RZ ;
      [----:B-----5:R0:W-:-:S02]         /*0618*/                   STL.64 [R1+0x20], R2 ;
      [----:B0-----:R-:W-:-:S13]         /*0628*/                   JCAL `(vprintf) ;
      [----:B------:R-:W-:Y:S15]         /*0630*/                   NOP ;
      [----:B------:R-:W-:Y:S07]         /*0638*/                   NOP ;
      [----:B------:R-:W-:-:S15]         /*0648*/                   EXIT ;
          .type           $_Z7argtestPiS_S_$_Z2f1ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f1ii,($_Z7argtestPiS_S_$_Z2f2ii - $_Z7argtestPiS_S_$_Z2f1ii)
  $_Z7argtestPiS_S_$_Z2f1ii:
      [----:B------:R-:W-:-:S15]         /*0650*/                   RET ;
          .type           $_Z7argtestPiS_S_$_Z2f2ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f2ii,(.L_199 - $_Z7argtestPiS_S_$_Z2f2ii)
  $_Z7argtestPiS_S_$_Z2f2ii:
      [----:B------:R-:W-:-:S15]         /*0658*/                   RET ;
  .L_199:
          .type           $_Z7argtestPiS_S_$_Z2f3ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f3ii,($_Z7argtestPiS_S_$_Z2f4ii - $_Z7argtestPiS_S_$_Z2f3ii)
  $_Z7argtestPiS_S_$_Z2f3ii:
      [----:B------:R-:W-:-:S15]         /*0668*/                   RET ;
          .type           $_Z7argtestPiS_S_$_Z2f4ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f4ii,($_Z7argtestPiS_S_$_Z2f5ii - $_Z7argtestPiS_S_$_Z2f4ii)
  $_Z7argtestPiS_S_$_Z2f4ii:
      [----:B------:R-:W-:-:S15]         /*0670*/                   RET ;
          .type           $_Z7argtestPiS_S_$_Z2f5ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f5ii,($_Z7argtestPiS_S_$_Z2f6ii - $_Z7argtestPiS_S_$_Z2f5ii)
  $_Z7argtestPiS_S_$_Z2f5ii:
      [----:B------:R-:W-:-:S00]         /*0678*/         {         IADD R4, R4, R5 ;
      [----:B------:R-:W-:-:S15]         /*0688*/                   RET         }
          .type           $_Z7argtestPiS_S_$_Z2f6ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f6ii,($_Z7argtestPiS_S_$_Z2f7ii - $_Z7argtestPiS_S_$_Z2f6ii)
  $_Z7argtestPiS_S_$_Z2f6ii:
      [----:B------:R-:W-:-:S02]         /*0690*/                   IADD32I R1, R1, -0x8 ;
      [----:B------:R0:W-:-:S04]         /*0698*/                   STL [R1], R2 ;
      [----:B------:R-:W1:-:S01]         /*06a8*/                   I2F.F32.S32.RP R0, |R5| ;
      [----:B------:R-:W-:-:S01]         /*06b0*/                   I2I.S32.S32 R9, |R5| ;
      [----:B------:R2:W-:-:S13]         /*06b8*/                   I2I.S32.S32 R7, |R4| ;
      [----:B--2---:R-:W-:-:S00]         /*06c8*/         {         LOP.XOR R4, R4, R5 ;
      [----:B-1----:R-:W1:-:S13]         /*06d0*/                   MUFU.RCP R0, R0         }
      [----:B01----:R-:W-:-:S02]         /*06d8*/                   IADD32I R2, R0, 0xffffffe ;
      [----:B------:R-:W0:-:S13]         /*06e8*/                   F2I.FTZ.U32.F32.TRUNC R2, R2 ;
      [----:B0-----:R-:W-:-:S01]         /*06f0*/                   XMAD R3, R9.reuse, R2.reuse, RZ ;
      [----:B------:R-:W-:-:S06]         /*06f8*/                   XMAD.MRG R6, R9.reuse, R2.H1, RZ ;
      [----:B------:R-:W-:Y:S06]         /*0708*/                   XMAD.PSL.CBCC R3, R9.H1, R6.H1, R3 ;
      [----:B------:R-:W-:-:S06]         /*0710*/                   IADD R8, -R3, RZ ;
      [----:B------:R-:W-:-:S01]         /*0718*/                   XMAD R3, R2.reuse, R8.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0728*/                   XMAD R6, R2.reuse, R8.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S04]         /*0730*/                   XMAD R0, R2.H1.reuse, R8.H1.reuse, R2 ;
      [----:B------:R-:W-:-:S06]         /*0738*/                   XMAD.CHI R3, R2.H1, R8, R3 ;
      [----:B------:R-:W-:-:S00]         /*0748*/         {         IADD3.RS R0, R3, R6, R0;
      [----:B------:R-:W0:-:S06]         /*0750*/                   I2I.S32.S32 R6, -|R5| }
      [----:B------:R-:W-:Y:S01]         /*0758*/                   XMAD R2, R0, R7, RZ ;
      [----:B------:R-:W-:-:S05]         /*0768*/                   XMAD R3, R0.reuse, R7.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0770*/                   XMAD.CHI R2, R0.H1.reuse, R7.reuse, R2 ;
      [----:B------:R-:W-:-:S13]         /*0778*/                   XMAD R0, R0.H1, R7.H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*0788*/                   IADD3.RS R0, R2, R3, R0 ;
      [----:B0-----:R-:W-:-:S01]         /*0790*/                   XMAD R3, R6.reuse, R0.reuse, R7 ;
      [----:B------:R-:W-:-:S06]         /*0798*/                   XMAD.MRG R8, R6.reuse, R0.H1, RZ ;
      [----:B------:R-:W-:Y:S06]         /*07a8*/                   XMAD.PSL.CBCC R2, R6.H1, R8.H1, R3 ;
      [----:B------:R-:W-:Y:S13]         /*07b0*/                   ISETP.GT.U32.AND P1, PT, R9, R2, PT ;
      [----:B------:R-:W-:-:S01]         /*07b8*/              @!P1 IADD R2, R2, -R9.reuse ;
      [----:B------:R-:W-:-:S01]         /*07c8*/              @!P1 IADD32I R0, R0, 0x1 ;
      [----:B------:R-:W-:-:S04]         /*07d0*/                   ISETP.GE.AND P1, PT, R4, RZ, PT ;
      [----:B------:R-:W-:-:S00]         /*07d8*/         {         ISETP.GE.U32.AND P0, PT, R2, R9, PT   ;
      [----:B------:R0:W5:Y:S13]         /*07e8*/                   LDL R2, [R1]           }
      [----:B------:R-:W-:-:S01]         /*07f0*/               @P0 IADD32I R0, R0, 0x1 ;
      [----:B------:R-:W-:-:S05]         /*07f8*/                   ISETP.EQ.AND P0, PT, R5, RZ, PT ;
      [----:B------:R-:W-:Y:S01]         /*0808*/                   MOV R4, R0 ;
      [----:B0-----:R-:W-:-:S07]         /*0810*/                   IADD32I R1, R1, 0x8 ;
      [----:B------:R-:W-:-:S15]         /*0818*/              @!P1 IADD R4, -R4, RZ ;
      [----:B------:R-:W-:-:S00]         /*0828*/         {     @P0 LOP.PASS_B R4, RZ, ~R5 ;
      [----:B-----5:R-:W-:-:S15]         /*0830*/                   RET         }
          .type           $_Z7argtestPiS_S_$_Z2f7ii,@function
          .size           $_Z7argtestPiS_S_$_Z2f7ii,(.L_204 - $_Z7argtestPiS_S_$_Z2f7ii)
  $_Z7argtestPiS_S_$_Z2f7ii:
      [----:B------:R-:W-:-:S02]         /*0838*/                   IADD32I R1, R1, -0x8 ;
      [----:B------:R0:W-:-:S04]         /*0848*/                   STL [R1], R2 ;
      [----:B------:R-:W-:-:S00]         /*0850*/         {         ISETP.GE.AND P1, PT, R4, RZ, PT ;
      [----:B------:R-:W1:-:S01]         /*0858*/                   I2F.F32.S32.RP R0, |R5|         }
      [----:B------:R-:W-:-:S01]         /*0868*/                   I2I.S32.S32 R9, |R5| ;
      [----:B------:R-:W-:-:S01]         /*0870*/                   I2I.S32.S32 R7, |R4| ;
      [----:B-1----:R-:W1:-:S13]         /*0878*/                   MUFU.RCP R0, R0 ;
      [----:B01----:R-:W-:-:S02]         /*0888*/                   IADD32I R2, R0, 0xffffffe ;
      [----:B------:R-:W0:-:S13]         /*0890*/                   F2I.FTZ.U32.F32.TRUNC R2, R2 ;
      [----:B0-----:R-:W-:-:S01]         /*0898*/                   XMAD R3, R9.reuse, R2.reuse, RZ ;
      [----:B------:R-:W-:Y:S06]         /*08a8*/                   XMAD.MRG R6, R9, R2.H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*08b0*/                   XMAD.PSL.CBCC R3, R9.H1, R6.H1, R3 ;
      [----:B------:R-:W-:-:S06]         /*08b8*/                   IADD R8, -R3, RZ ;
      [----:B------:R-:W-:-:S01]         /*08c8*/                   XMAD R3, R2.reuse, R8.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*08d0*/                   XMAD R6, R2.reuse, R8.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S04]         /*08d8*/                   XMAD R0, R2.H1.reuse, R8.H1.reuse, R2 ;
      [----:B------:R-:W-:Y:S06]         /*08e8*/                   XMAD.CHI R3, R2.H1, R8, R3 ;
      [----:B------:R-:W-:-:S00]         /*08f0*/         {         IADD3.RS R0, R3, R6, R0   ;
      [----:B------:R-:W0:-:S06]         /*08f8*/                   I2I.S32.S32 R6, -|R5|           }
      [----:B------:R-:W-:-:S01]         /*0908*/                   XMAD R2, R0.reuse, R7.reuse, RZ ;
      [----:B------:R-:W-:-:S05]         /*0910*/                   XMAD R3, R0.reuse, R7.H1.reuse, RZ ;
      [----:B------:R-:W-:-:S01]         /*0918*/                   XMAD.CHI R2, R0.H1.reuse, R7.reuse, R2 ;
      [----:B------:R-:W-:-:S13]         /*0928*/                   XMAD R0, R0.H1, R7.H1, RZ ;
      [----:B------:R-:W-:-:S00]         /*0930*/         {         IADD3.RS R0, R2, R3, R0   ;
      [----:B------:R1:W5:-:S06]         /*0938*/                   LDL R2, [R1]           }
      [----:B0-----:R-:W-:Y:S01]         /*0948*/                   XMAD R3, R6, R0, R7 ;
      [----:B------:R-:W-:-:S06]         /*0950*/                   XMAD.MRG R0, R6.reuse, R0.H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*0958*/                   XMAD.PSL.CBCC R0, R6.H1, R0.H1, R3 ;
      [----:B------:R-:W-:Y:S13]         /*0968*/                   ISETP.GT.U32.AND P0, PT, R9, R0, PT ;
      [----:B------:R-:W-:-:S06]         /*0970*/              @!P0 IADD R0, R0, -R9 ;
      [----:B------:R-:W-:Y:S13]         /*0978*/                   ISETP.GT.U32.AND P0, PT, R9, R0, PT ;
      [----:B------:R-:W-:-:S01]         /*0988*/              @!P0 IADD R0, R0, -R9 ;
      [----:B------:R-:W-:-:S05]         /*0990*/                   ISETP.EQ.AND P0, PT, R5, RZ, PT ;
      [----:B------:R-:W-:Y:S01]         /*0998*/                   MOV R4, R0 ;
      [----:B-1----:R-:W-:-:S07]         /*09a8*/                   IADD32I R1, R1, 0x8 ;
      [----:B------:R-:W-:-:S15]         /*09b0*/              @!P1 IADD R4, -R4, RZ ;
      [----:B------:R-:W-:-:S00]         /*09b8*/         {     @P0 LOP.PASS_B R4, RZ, ~R5 ;
      [----:B-----5:R-:W-:-:S15]         /*09c8*/                   RET         }
  .L_13:
      [----:B------:R-:W-:-:S15]         /*09d0*/                   BRA `(.L_13) ;
  .L_204:
  
  

// --------------------- .text._Z11shared_testfPf         --------------------------
	.section	.text._Z11shared_testfPf,"ax",@progbits
	.__section_name         0x101 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x100006
	.__section_addr         0x0
	.__section_offset       0x29a0 	// maybe updated by assembler
	.__section_size         0x180 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0xa000028
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectionflags	@"SHF_BARRIERS=1"
  	.sectioninfo	@"SHI_REGISTERS=10"
  	.align	32
          .global         _Z11shared_testfPf
          .type           _Z11shared_testfPf,@function
          .size           _Z11shared_testfPf,(.L_206 - _Z11shared_testfPf)
          .other          _Z11shared_testfPf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z11shared_testfPf:
  .text._Z11shared_testfPf:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W0:-:S01]         /*0010*/                   S2R R8, SR_TID.X ;
      [----:B------:R-:W0:-:S15]         /*0018*/                   S2R R2, SR_CTAID.X ;
      [----:B0-----:R-:W-:Y:S01]         /*0028*/                   XMAD R0, R2, c[0x0] [0x8], R8 ;
      [----:B------:R-:W-:Y:S06]         /*0030*/                   XMAD.MRG R3, R2, c[0x0] [0x8].H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*0038*/                   XMAD.PSL.CBCC R0, R2.H1, R3.H1, R0 ;
      [----:B------:R-:W-:-:S01]         /*0048*/                   SHR R3, R0.reuse, 0x1e ;
      [----:B------:R-:W-:Y:S06]         /*0050*/                   ISCADD R2.CC, R0, c[0x0][0x148], 0x2 ;
      [----:B------:R-:W-:Y:S02]         /*0058*/                   IADD.X R3, R3, c[0x0][0x14c] ;
      [----:B------:R-:W5:-:S01]         /*0068*/                   LDG.E R4, [R2] ;
      [----:B------:R-:W-:-:S06]         /*0070*/                   SHR R5, R0, 0x1f ;
      [----:B------:R-:W-:Y:S06]         /*0078*/                   LEA.HI R5, R5, R0, RZ, 0xb ;
      [----:B------:R-:W-:-:S01]         /*0088*/                   LOP32I.AND R5, R5, 0x3ffff800 ;
      [----:B------:R-:W-:Y:S01]         /*0090*/                   SHL R6, R8, 0x2 ;
      [----:B------:R-:W-:Y:S04]         /*0098*/                   IADD32I R8, -R8, 0x400 ;
      [----:B------:R-:W-:Y:S01]         /*00a8*/                   IADD R7, R0, -R5 ;
      [----:B------:R-:W-:-:S01]         /*00b0*/                   IADD32I R0, -R0, 0x800 ;
      [----:B------:R-:W-:-:S04]         /*00b8*/                   SHL R8, R8, 0x2 ;
      [----:B------:R-:W-:-:S01]         /*00c8*/                   SHL R9, R7, 0x2 ;
      [----:B------:R-:W-:-:S01]         /*00d0*/                   SHL R0, R0, 0x2 ;
      [----:B-----5:R-:W-:Y:S13]         /*00d8*/                   FSETP.GT.AND P0, PT, R4, c[0x0][0x140], PT ;
      [----:B------:R-:W-:Y:S04]         /*00e8*/                   SEL R5, R4, c[0x0][0x140], P0 ;
      [----:B------:R-:W-:-:S00]         /*00f0*/         {         FMUL R4, R4, c[0x0][0x140] ;
      [----:B------:R-:W-:-:S04]         /*00f8*/                   STS [R6], R5         }
      [----:B------:R-:W-:-:S01]         /*0108*/                   STS [R9+0x1010], R4 ;
      [----:B------:R-:W-:-:S15]         /*0110*/                   BAR.SYNC 0x0 ;
      [----:B------:R-:W-:-:S05]         /*0118*/                   MEMBAR.CTA ;
      [----:B------:R-:W-:-:S01]         /*0128*/                   LDS.U.32 R8, [R8] ;
      [----:B------:R-:W0:-:S15]         /*0130*/                   LDS.U.32 R7, [R0+0x1010] ;
      [----:B0-----:R-:W-:Y:S02]         /*0138*/                   FADD R7, R8, R7 ;
      [----:B------:R-:W-:-:S01]         /*0148*/                   STG.E [R2], R7 ;
      [----:B------:R-:W-:Y:S15]         /*0150*/                   NOP ;
      [----:B------:R-:W-:Y:S10]         /*0158*/                   NOP ;
      [----:B------:R-:W-:-:S15]         /*0168*/                   EXIT ;
  .L_14:
      [----:B------:R-:W-:-:S15]         /*0170*/                   BRA `(.L_14) ;
  .L_206:
  
  

// --------------------- .text._Z11nvinfo_testiiPi        --------------------------
	.section	.text._Z11nvinfo_testiiPi,"ax",@progbits
	.__section_name         0x175 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x2b20 	// maybe updated by assembler
	.__section_size         0xc0 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x8000029
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=8"
  	.align	32
          .global         _Z11nvinfo_testiiPi
          .type           _Z11nvinfo_testiiPi,@function
          .size           _Z11nvinfo_testiiPi,(.L_207 - _Z11nvinfo_testiiPi)
          .other          _Z11nvinfo_testiiPi,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z11nvinfo_testiiPi:
  .text._Z11nvinfo_testiiPi:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W0:-:S01]         /*0010*/                   S2R R0, SR_TID.X ;
      [----:B------:R-:W0:-:S15]         /*0018*/                   S2R R6, SR_CTAID.X ;
      [----:B0-----:R-:W-:-:S00]         /*0028*/         {         XMAD R0, R6.reuse, c[0x0] [0x8], R0 ;
      [----:B------:R-:W0:-:S01]         /*0030*/                   S2R R7, SR_CTAID.Z         }
      [----:B------:R-:W-:Y:S06]         /*0038*/                   XMAD.MRG R3, R6, c[0x0] [0x8].H1, RZ ;
      [----:B------:R-:W-:-:S06]         /*0048*/                   XMAD.PSL.CBCC R2, R6.H1, R3.H1, R0 ;
      [----:B------:R-:W-:-:S01]         /*0050*/                   SHR R0, R2.reuse, 0x1e ;
      [----:B------:R-:W-:Y:S06]         /*0058*/                   ISCADD R2.CC, R2, c[0x0][0x148], 0x2 ;
      [----:B------:R-:W-:-:S00]         /*0068*/         {         IADD.X R3, R0, c[0x0][0x14c]   ;
      [----:B------:R-:W0:-:S07]         /*0070*/                   S2R R0, SR_CTAID.Y           }
      [----:B------:R-:W5:-:S15]         /*0078*/                   LDG.E R5, [R2] ;
      [----:B0-----:R-:W-:Y:S06]         /*0088*/                   IADD3 R0, R7, R0, R6 ;
      [----:B-----5:R-:W-:Y:S02]         /*0090*/                   IADD R0, R0, R5 ;
      [----:B------:R-:W-:-:S01]         /*0098*/                   STG.E [R2], R0 ;
      [----:B------:R-:W-:-:S15]         /*00a8*/                   EXIT ;
  .L_15:
      [----:B------:R-:W-:-:S15]         /*00b0*/                   BRA `(.L_15) ;
  .L_207:
  
  

// --------------------- .text._Z5childPii                --------------------------
	.section	.text._Z5childPii,"ax",@progbits
	.__section_name         0x1ed 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x2be0 	// maybe updated by assembler
	.__section_size         0x240 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0xb00002a
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=11"
  	.align	32
          .global         _Z5childPii
          .type           _Z5childPii,@function
          .size           _Z5childPii,(.L_208 - _Z5childPii)
          .other          _Z5childPii,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z5childPii:
  .text._Z5childPii:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W-:-:S00]         /*0010*/         {         MOV32I R7, 0x92492493 ;
      [----:B------:R-:W0:-:S01]         /*0018*/                   S2R R0, SR_TID.X         }
      [----:B------:R-:W0:-:S15]         /*0028*/                   S2R R2, SR_CTAID.X ;
      [----:B0-----:R-:W-:Y:S01]         /*0030*/                   XMAD R0, R2, c[0x0] [0x8], R0 ;
      [----:B------:R-:W-:Y:S06]         /*0038*/                   XMAD.MRG R3, R2, c[0x0] [0x8].H1, RZ ;
      [----:B------:R-:W-:Y:S06]         /*0048*/                   XMAD.PSL.CBCC R2, R2.H1, R3.H1, R0 ;
      [----:B------:R-:W-:Y:S01]         /*0050*/                   XMAD R0, R2, R7, RZ ;
      [----:B------:R-:W-:Y:S01]         /*0058*/                   XMAD.U16.S16 R4, R2, R7.H1, RZ ;
      [----:B------:R-:W-:Y:S04]         /*0068*/                   XMAD.S16.S16.CSFU R5, R2.H1, R7.H1, R2 ;
      [----:B------:R-:W-:-:S01]         /*0070*/                   XMAD.S16.U16.CHI R6, R2.H1.reuse, R7, R0 ;
      [----:B------:R-:W-:-:S05]         /*0078*/                   SHR R3, R2, 0x1f ;
      [----:B------:R-:W-:-:S01]         /*0088*/                   IADD3.RS R0, R6, R4, R5 ;
      [----:B------:R-:W-:-:S05]         /*0090*/                   LEA.HI R4, R3, R2, RZ, 0x4 ;
      [----:B------:R-:W-:Y:S01]         /*0098*/                   SHR R3, R0, 0x2 ;
      [----:B------:R-:W-:Y:S01]         /*00a8*/                   MOV32I R5, 0xfffffff9 ;
      [----:B------:R-:W-:-:S04]         /*00b0*/                   LOP32I.AND R4, R4, 0xfffffff0 ;
      [----:B------:R-:W-:Y:S01]         /*00b8*/                   LEA.HI R3, R0, R3, RZ, 0x1 ;
      [----:B------:R-:W-:Y:S01]         /*00c8*/                   MOV32I R6, 32@lo(GlobalC2) ;
      [----:B------:R-:W-:Y:S04]         /*00d0*/                   IADD R4, R2, -R4 ;
      [----:B------:R-:W-:Y:S01]         /*00d8*/                   XMAD R0, R3, R5, R2 ;
      [----:B------:R-:W-:-:S01]         /*00e8*/                   XMAD.MRG R5, R3, R5.H1, RZ ;
      [----:B------:R-:W-:Y:S01]         /*00f0*/                   ISCADD R6.CC, R4, R6, 0x2 ;
      [----:B------:R-:W-:-:S01]         /*00f8*/                   MOV32I R7, 32@hi(GlobalC2) ;
      [----:B------:R-:W-:Y:S03]         /*0108*/                   SHR R4, R4, 0x1e ;
      [----:B------:R-:W-:Y:S01]         /*0110*/                   XMAD.PSL.CBCC R3, R3.H1, R5.H1, R0 ;
      [----:B------:R-:W-:Y:S02]         /*0118*/                   MOV32I R5, 32@lo(GlobalC1) ;
      [----:B------:R-:W-:Y:S02]         /*0128*/                   IADD.X R7, R7, R4 ;
      [----:B------:R-:W-:-:S00]         /*0130*/         {         MOV32I R0, 32@hi(GlobalC1) ;
      [----:B------:R-:W-:-:S02]         /*0138*/                   LDG.E R6, [R6]         }
      [----:B------:R-:W-:-:S01]         /*0148*/                   ISCADD R4.CC, R3.reuse, R5, 0x2 ;
      [----:B------:R-:W-:-:S01]         /*0150*/                   SHR R3, R3, 0x1e ;
      [----:B------:R-:W-:Y:S05]         /*0158*/                   SHR R8, R2, 0x1e ;
      [----:B------:R-:W-:-:S02]         /*0168*/                   IADD.X R5, R0, R3 ;
      [----:B------:R-:W-:-:S00]         /*0170*/         {         ISCADD R2.CC, R2, c[0x0][0x140], 0x2 ;
      [----:B------:R-:W5:-:S06]         /*0178*/                   LDG.E R4, [R4]         }
      [----:B------:R-:W-:Y:S02]         /*0188*/                   IADD.X R3, R8, c[0x0][0x144] ;
      [----:B------:R-:W5:-:S01]         /*0190*/                   LDG.E R9, [R2] ;
      [----:B------:R-:W-:-:S06]         /*0198*/                   MOV R8, c[0x0][0x148] ;
      [----:B------:R-:W-:Y:S06]         /*01a8*/                   SHL R8, R8, 0x2 ;
      [----:B------:R-:W0:-:S01]         /*01b0*/                   LDC R0, c[0x3][R8] ;
      [----:B------:R-:W0:-:S15]         /*01b8*/                   LDC R10, c[0x3][R8+0x2c] ;
      [----:B0-----:R-:W-:-:S01]         /*01c8*/                   IADD R10, R0, R10 ;
      [----:B-----5:R-:W-:Y:S06]         /*01d0*/                   IADD3 R0, R6, c[0x0][0x148], R4 ;
      [----:B------:R-:W-:Y:S01]         /*01d8*/                   XMAD R10, R9, R0, R10 ;
      [----:B------:R-:W-:Y:S06]         /*01e8*/                   XMAD.MRG R0, R9, R0.H1, RZ ;
      [----:B------:R-:W-:Y:S02]         /*01f0*/                   XMAD.PSL.CBCC R9, R9.H1, R0.H1, R10 ;
      [----:B------:R-:W-:-:S01]         /*01f8*/                   STG.E [R2], R9 ;
      [----:B------:R-:W-:-:S15]         /*0208*/                   EXIT ;
  .L_16:
      [----:B------:R-:W-:-:S15]         /*0210*/                   BRA `(.L_16) ;
  .L_208:
  
  

// --------------------- .text._Z10local_testiiPi         --------------------------
	.section	.text._Z10local_testiiPi,"ax",@progbits
	.__section_name         0x25b 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x2e20 	// maybe updated by assembler
	.__section_size         0x140 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0xb00002b
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=11"
  	.align	32
          .global         _Z10local_testiiPi
          .type           _Z10local_testiiPi,@function
          .size           _Z10local_testiiPi,(.L_209 - _Z10local_testiiPi)
          .other          _Z10local_testiiPi,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z10local_testiiPi:
  .text._Z10local_testiiPi:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W-:-:S00]         /*0010*/         {         MOV R2, c[0x0][0x140] ;
      [----:B------:R-:W0:-:S01]         /*0018*/                   S2R R0, SR_TID.X         }
      [----:B------:R-:W-:-:S00]         /*0028*/         {         IADD32I R1, R1, -0x48 ;
      [----:B------:R-:W0:-:S06]         /*0030*/                   S2R R3, SR_CTAID.X         }
      [----:B------:R-:W-:-:S15]         /*0038*/                   LEA R9, R2, R1, 0x2 ;
      [----:B0-----:R-:W-:Y:S01]         /*0048*/                   XMAD R4, R3, c[0x0] [0x8], R0 ;
      [----:B------:R-:W-:-:S01]         /*0050*/                   XMAD.MRG R5, R3, c[0x0] [0x8].H1, RZ ;
      [----:B------:R-:W-:Y:S05]         /*0058*/                   SHL R0, R2, 0x1 ;
      [----:B------:R-:W-:Y:S02]         /*0068*/                   XMAD.PSL.CBCC R4, R3.H1, R5.H1, R4 ;
      [----:B------:R-:W-:-:S00]         /*0070*/         {         MOV R3, c[0x0][0x144] ;
      [----:B------:R-:W-:-:S01]         /*0078*/                   STL [R9], R4         }
      [----:B------:R-:W-:Y:S03]         /*0088*/                   LEA R10, R0, R1, 0x2 ;
      [----:B------:R-:W-:-:S02]         /*0090*/                   IADD32I R0, R4.reuse, 0x1 ;
      [----:B------:R-:W-:-:S00]         /*0098*/         {         SHL R5, R4.reuse, 0x1 ;
      [----:B------:R-:W-:-:S02]         /*00a8*/                   STL [R9+0x4], R0         }
      [----:B------:R-:W-:-:S00]         /*00b0*/         {         LEA R8, R3, R1, 0x2 ;
      [----:B------:R-:W-:-:S02]         /*00b8*/                   STL [R10], R5         }
      [----:B------:R-:W-:-:S00]         /*00c8*/         {         SHR R3, R4.reuse, 0x1e ;
      [----:B------:R-:W-:-:S01]         /*00d0*/                   LDL R6, [R8]         }
      [----:B------:R-:W-:-:S00]         /*00d8*/         {         ISCADD R2.CC, R4, c[0x0][0x148], 0x2 ;
      [----:B------:R-:W5:-:S06]         /*00e8*/                   LDL R7, [R8+0x4]         }
      [----:B------:R-:W-:Y:S07]         /*00f0*/                   IADD.X R3, R3, c[0x0][0x14c] ;
      [----:B-----5:R-:W-:Y:S02]         /*00f8*/                   IADD R7, R6, R7 ;
      [----:B------:R-:W-:-:S01]         /*0108*/                   STG.E [R2], R7 ;
      [----:B------:R-:W-:-:S15]         /*0110*/                   EXIT ;
  .L_17:
      [----:B------:R-:W-:-:S15]         /*0118*/                   BRA `(.L_17) ;
  .L_209:
  
  

// --------------------- .text._Z4test6float4PS_          --------------------------
	.section	.text._Z4test6float4PS_,"ax",@progbits
	.__section_name         0x2cf 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x2f60 	// maybe updated by assembler
	.__section_size         0x340 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x800002c
	.__section_entsize      0
	.align                32 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=8"
  	.align	32
          .global         _Z4test6float4PS_
          .type           _Z4test6float4PS_,@function
          .size           _Z4test6float4PS_,(.L_210 - _Z4test6float4PS_)
          .other          _Z4test6float4PS_,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z4test6float4PS_:
  .text._Z4test6float4PS_:
      [----:B------:R-:W-:-:S06]         /*0008*/                   MOV R1, c[0x0][0x20] ;
      [----:B------:R-:W0:-:S15]         /*0010*/                   S2R R2, SR_TID.X ;
      [----:B0-----:R-:W-:-:S01]         /*0018*/                   SHR R0, R2.reuse, 0x1c ;
      [----:B------:R-:W-:-:S06]         /*0028*/                   ISCADD R2.CC, R2, c[0x0][0x150], 0x4 ;
      [----:B------:R-:W-:-:S02]         /*0030*/                   IADD.X R3, R0, c[0x0][0x154] ;
      [----:B------:R-:W5:-:S05]         /*0038*/                   LDG.E.128 R4, [R2] ;
      [----:B-----5:R-:W-:-:S01]         /*0048*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*0050*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0058*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*0068*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0070*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*0078*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0088*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:Y:S03]         /*0090*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0098*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*00a8*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*00b0*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*00b8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*00c8*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*00d0*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*00d8*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*00e8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*00f0*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*00f8*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0108*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:Y:S03]         /*0110*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0118*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*0128*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0130*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*0138*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0148*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*0150*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0158*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*0168*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0170*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*0178*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0188*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:Y:S03]         /*0190*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0198*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*01a8*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*01b0*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*01b8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*01c8*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*01d0*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*01d8*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*01e8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*01f0*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*01f8*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0208*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:Y:S03]         /*0210*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0218*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*0228*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0230*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*0238*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0248*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*0250*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0258*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*0268*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0270*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*0278*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*0288*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:Y:S03]         /*0290*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*0298*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:-:S01]         /*02a8*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*02b0*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S03]         /*02b8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*02c8*/                   FFMA R7, R7, c[0x0][0x14c], R7 ;
      [----:B------:R-:W-:Y:S01]         /*02d0*/                   FFMA R6, R6, c[0x0][0x148], R6 ;
      [----:B------:R-:W-:-:S01]         /*02d8*/                   FFMA R5, R5, c[0x0][0x144], R5 ;
      [----:B------:R-:W-:-:S02]         /*02e8*/                   FFMA R4, R4, c[0x0][0x140], R4 ;
      [----:B------:R-:W-:-:S01]         /*02f0*/                   STG.E.128 [R2], R4 ;
      [----:B------:R-:W-:-:S15]         /*02f8*/                   EXIT ;
  .L_18:
      [----:B------:R-:W-:-:S15]         /*0308*/                   BRA `(.L_18) ;
  .L_210:
  
  

// --------------------- .nv.global.init                  --------------------------
	.section	.nv.global.init,"aw",@progbits
	.__section_name         0x98 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x32a0 	// maybe updated by assembler
	.__section_size         0x5c 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.type		flist,@object
  	.size		flist,(__cudart_i2opi_f - flist)
  flist:
  .nv.global.init:
          /*0000*/ 	.byte	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0010*/ 	.byte	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0020*/ 	.byte	0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  	.type		__cudart_i2opi_f,@object
  	.size		__cudart_i2opi_f,($str - __cudart_i2opi_f)
  __cudart_i2opi_f:
          /*0038*/ 	.byte	0x41, 0x90, 0x43, 0x3c, 0x99, 0x95, 0x62, 0xdb, 0xc0, 0xdd, 0x34, 0xf5, 0xd1, 0x57, 0x27, 0xfc
          /*0048*/ 	.byte	0x29, 0x15, 0x44, 0x4e, 0x6e, 0x83, 0xf9, 0xa2
  	.type		$str,@object
  	.size		$str,(.L_7 - $str)
  $str:
          /*0050*/ 	.byte	0x61, 0x5b, 0x25, 0x64, 0x5d, 0x20, 0x3d, 0x20, 0x25, 0x64, 0x0a, 0x00
  .L_7:
  
  
// --------------------- .nv.shared._Z7argtestPiS_S_      --------------------------
	.section	.nv.shared._Z7argtestPiS_S_,"aw",@nobits
	.__section_name         0x63 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x17
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  
  
// --------------------- .nv.global                       --------------------------
	.section	.nv.global,"aw",@nobits
	.__section_name         0x8d 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0xa0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  	.type		GlobalC1,@object
  	.size		GlobalC1,(GlobalC2 - GlobalC1)
  GlobalC1:
  .nv.global:
  	.zero		28
  	.type		GlobalC2,@object
  	.size		GlobalC2,(.L_5 - GlobalC2)
  GlobalC2:
  	.zero		132
  .L_5:
  
  
// --------------------- .nv.shared._Z11shared_testfPf    --------------------------
	.section	.nv.shared._Z11shared_testfPf,"aw",@nobits
	.__section_name         0x136 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x1010 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x18
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  .nv.shared._Z11shared_testfPf:
  	.zero		4112
  
  
// --------------------- .nv.shared._Z11nvinfo_testiiPi   --------------------------
	.section	.nv.shared._Z11nvinfo_testiiPi,"aw",@nobits
	.__section_name         0x1ac 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x19
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  
  
// --------------------- .nv.shared._Z5childPii           --------------------------
	.section	.nv.shared._Z5childPii,"aw",@nobits
	.__section_name         0x214 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1a
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  
  
// --------------------- .nv.shared._Z10local_testiiPi    --------------------------
	.section	.nv.shared._Z10local_testiiPi,"aw",@nobits
	.__section_name         0x290 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1b
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  
  
// --------------------- .nv.shared._Z4test6float4PS_     --------------------------
	.section	.nv.shared._Z4test6float4PS_,"aw",@nobits
	.__section_name         0x302 	// offset in .shstrtab
	.__section_type         SHT_NOBITS
	.__section_flags        0x3
	.__section_addr         0x0
	.__section_offset       0x3300 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x1c
	.__section_entsize      0
	.align                16 	// equivalent to set sh_addralign
  	.align	16
  
  
  //--------------------- SYMBOLS --------------------------
  
  	.type		texRef2d,@"STT_CUDA_TEXTURE"
  	.type		texRef1d,@"STT_CUDA_TEXTURE"
  	.type		inputSurfRef,@"STT_CUDA_SURFACE"
  	.type		outputSurfRef,@"STT_CUDA_SURFACE"
  	.type		vprintf,@function
  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0x3c40   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x15e8   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x1cb8   		// file size, maybe updated by assembler 
  .__segment_memsz   0x1cb8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant3"  		// first section in this segment 
  .__segment_endsection      ".text._Z4test6float4PS_"  		// last  section in this segment 

// Program segment PT_LOAD, 6 
  .__segment  "PT_LOAD", 6 
  .__segment_offset  0x32a0   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x60   		// file size, maybe updated by assembler 
  .__segment_memsz   0x1110   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.global.init"  		// first section in this segment 
  .__segment_endsection      ".nv.shared._Z4test6float4PS_"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


